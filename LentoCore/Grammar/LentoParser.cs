//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammar\LentoParser.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LentoCore.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class LentoParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SP=1, NL=2, COMMENT_SINGLE=3, COMMENT_MULTI=4, INTEGER=5, FLOATING_POINT=6, 
		NUMBER_HEX=7, NUMBER_BINARY=8, IDENTIFIER=9, IDENTIFIER_NAMESPACED=10, 
		IDENTIFIER_IGNORE=11, ATOM=12, ESCAPED=13, SPRING=14, CHARACTER=15, LPAREN=16, 
		RPAREN=17, LBRACKET=18, RBRACKET=19, LBRACE=20, RBRACE=21, ASSIGN=22, 
		SEPARATOR_COMMA=23, SEPARATOR_DOT=24, COLON=25, SEMI_COLON=26, OPERATOR=27;
	public const int
		RULE_whitespace_any = 0, RULE_whitespace_sp = 1, RULE_whitespace_nl = 2, 
		RULE_semi_colon = 3, RULE_atom = 4, RULE_type = 5, RULE_type_namespaced = 6, 
		RULE_identifier = 7, RULE_identifier_namespaced = 8, RULE_identifier_ignore = 9, 
		RULE_function_name = 10, RULE_function_name_namespaced = 11, RULE_operator_infix = 12, 
		RULE_operator_prefix = 13, RULE_integer = 14, RULE_floating_point = 15, 
		RULE_number_hex = 16, RULE_number_binary = 17, RULE_numerical = 18, RULE_string = 19, 
		RULE_character = 20, RULE_typed_identifier = 21, RULE_tuple = 22, RULE_tuple_type = 23, 
		RULE_list = 24, RULE_list_type = 25, RULE_map_element = 26, RULE_map = 27, 
		RULE_map_type = 28, RULE_block = 29, RULE_function_call = 30, RULE_function_declaration = 31, 
		RULE_variable_declaration = 32, RULE_variable_assignment = 33, RULE_variable_initialization = 34, 
		RULE_expression_separator = 35, RULE_expression = 36, RULE_compilation_unit = 37;
	public static readonly string[] ruleNames = {
		"whitespace_any", "whitespace_sp", "whitespace_nl", "semi_colon", "atom", 
		"type", "type_namespaced", "identifier", "identifier_namespaced", "identifier_ignore", 
		"function_name", "function_name_namespaced", "operator_infix", "operator_prefix", 
		"integer", "floating_point", "number_hex", "number_binary", "numerical", 
		"string", "character", "typed_identifier", "tuple", "tuple_type", "list", 
		"list_type", "map_element", "map", "map_type", "block", "function_call", 
		"function_declaration", "variable_declaration", "variable_assignment", 
		"variable_initialization", "expression_separator", "expression", "compilation_unit"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "'('", "')'", "'['", "']'", "'{'", "'}'", "'='", 
		"','", "'.'", "':'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SP", "NL", "COMMENT_SINGLE", "COMMENT_MULTI", "INTEGER", "FLOATING_POINT", 
		"NUMBER_HEX", "NUMBER_BINARY", "IDENTIFIER", "IDENTIFIER_NAMESPACED", 
		"IDENTIFIER_IGNORE", "ATOM", "ESCAPED", "SPRING", "CHARACTER", "LPAREN", 
		"RPAREN", "LBRACKET", "RBRACKET", "LBRACE", "RBRACE", "ASSIGN", "SEPARATOR_COMMA", 
		"SEPARATOR_DOT", "COLON", "SEMI_COLON", "OPERATOR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LentoParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static LentoParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LentoParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LentoParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Whitespace_anyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(LentoParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(LentoParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(LentoParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(LentoParser.SP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMENT_MULTI() { return GetTokens(LentoParser.COMMENT_MULTI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_MULTI(int i) {
			return GetToken(LentoParser.COMMENT_MULTI, i);
		}
		public Whitespace_anyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whitespace_any; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhitespace_any(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Whitespace_anyContext whitespace_any() {
		Whitespace_anyContext _localctx = new Whitespace_anyContext(Context, State);
		EnterRule(_localctx, 0, RULE_whitespace_any);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 76;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SP) | (1L << NL) | (1L << COMMENT_MULTI))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 79;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Whitespace_spContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(LentoParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(LentoParser.SP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMENT_MULTI() { return GetTokens(LentoParser.COMMENT_MULTI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_MULTI(int i) {
			return GetToken(LentoParser.COMMENT_MULTI, i);
		}
		public Whitespace_spContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whitespace_sp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhitespace_sp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Whitespace_spContext whitespace_sp() {
		Whitespace_spContext _localctx = new Whitespace_spContext(Context, State);
		EnterRule(_localctx, 2, RULE_whitespace_sp);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 81;
					_la = TokenStream.LA(1);
					if ( !(_la==SP || _la==COMMENT_MULTI) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 84;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Whitespace_nlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(LentoParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(LentoParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMENT_MULTI() { return GetTokens(LentoParser.COMMENT_MULTI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_MULTI(int i) {
			return GetToken(LentoParser.COMMENT_MULTI, i);
		}
		public Whitespace_nlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whitespace_nl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhitespace_nl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Whitespace_nlContext whitespace_nl() {
		Whitespace_nlContext _localctx = new Whitespace_nlContext(Context, State);
		EnterRule(_localctx, 4, RULE_whitespace_nl);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 86;
					_la = TokenStream.LA(1);
					if ( !(_la==NL || _la==COMMENT_MULTI) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 89;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Semi_colonContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI_COLON() { return GetToken(LentoParser.SEMI_COLON, 0); }
		public Semi_colonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_semi_colon; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSemi_colon(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Semi_colonContext semi_colon() {
		Semi_colonContext _localctx = new Semi_colonContext(Context, State);
		EnterRule(_localctx, 6, RULE_semi_colon);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			Match(SEMI_COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATOM() { return GetToken(LentoParser.ATOM, 0); }
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 8, RULE_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			Match(ATOM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LentoParser.IDENTIFIER, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_namespacedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LentoParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER_NAMESPACED() { return GetToken(LentoParser.IDENTIFIER_NAMESPACED, 0); }
		public Type_namespacedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_namespaced; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_namespaced(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_namespacedContext type_namespaced() {
		Type_namespacedContext _localctx = new Type_namespacedContext(Context, State);
		EnterRule(_localctx, 12, RULE_type_namespaced);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			_la = TokenStream.LA(1);
			if ( !(_la==IDENTIFIER || _la==IDENTIFIER_NAMESPACED) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LentoParser.IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 14, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identifier_namespacedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LentoParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER_NAMESPACED() { return GetToken(LentoParser.IDENTIFIER_NAMESPACED, 0); }
		public Identifier_namespacedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier_namespaced; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier_namespaced(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identifier_namespacedContext identifier_namespaced() {
		Identifier_namespacedContext _localctx = new Identifier_namespacedContext(Context, State);
		EnterRule(_localctx, 16, RULE_identifier_namespaced);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			_la = TokenStream.LA(1);
			if ( !(_la==IDENTIFIER || _la==IDENTIFIER_NAMESPACED) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Identifier_ignoreContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER_IGNORE() { return GetToken(LentoParser.IDENTIFIER_IGNORE, 0); }
		public Identifier_ignoreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier_ignore; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier_ignore(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Identifier_ignoreContext identifier_ignore() {
		Identifier_ignoreContext _localctx = new Identifier_ignoreContext(Context, State);
		EnterRule(_localctx, 18, RULE_identifier_ignore);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			Match(IDENTIFIER_IGNORE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LentoParser.IDENTIFIER, 0); }
		public Function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_nameContext function_name() {
		Function_nameContext _localctx = new Function_nameContext(Context, State);
		EnterRule(_localctx, 20, RULE_function_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_name_namespacedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LentoParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER_NAMESPACED() { return GetToken(LentoParser.IDENTIFIER_NAMESPACED, 0); }
		public Function_name_namespacedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_name_namespaced; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_name_namespaced(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_name_namespacedContext function_name_namespaced() {
		Function_name_namespacedContext _localctx = new Function_name_namespacedContext(Context, State);
		EnterRule(_localctx, 22, RULE_function_name_namespaced);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			_la = TokenStream.LA(1);
			if ( !(_la==IDENTIFIER || _la==IDENTIFIER_NAMESPACED) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_infixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(LentoParser.OPERATOR, 0); }
		public Operator_infixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_infix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_infix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_infixContext operator_infix() {
		Operator_infixContext _localctx = new Operator_infixContext(Context, State);
		EnterRule(_localctx, 24, RULE_operator_infix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			Match(OPERATOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_prefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR() { return GetToken(LentoParser.OPERATOR, 0); }
		public Operator_prefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_prefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_prefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_prefixContext operator_prefix() {
		Operator_prefixContext _localctx = new Operator_prefixContext(Context, State);
		EnterRule(_localctx, 26, RULE_operator_prefix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			Match(OPERATOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(LentoParser.INTEGER, 0); }
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(Context, State);
		EnterRule(_localctx, 28, RULE_integer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			Match(INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Floating_pointContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOATING_POINT() { return GetToken(LentoParser.FLOATING_POINT, 0); }
		public Floating_pointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floating_point; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloating_point(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Floating_pointContext floating_point() {
		Floating_pointContext _localctx = new Floating_pointContext(Context, State);
		EnterRule(_localctx, 30, RULE_floating_point);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			Match(FLOATING_POINT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Number_hexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_HEX() { return GetToken(LentoParser.NUMBER_HEX, 0); }
		public Number_hexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number_hex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber_hex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Number_hexContext number_hex() {
		Number_hexContext _localctx = new Number_hexContext(Context, State);
		EnterRule(_localctx, 32, RULE_number_hex);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			Match(NUMBER_HEX);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Number_binaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_BINARY() { return GetToken(LentoParser.NUMBER_BINARY, 0); }
		public Number_binaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number_binary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber_binary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Number_binaryContext number_binary() {
		Number_binaryContext _localctx = new Number_binaryContext(Context, State);
		EnterRule(_localctx, 34, RULE_number_binary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			Match(NUMBER_BINARY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Floating_pointContext floating_point() {
			return GetRuleContext<Floating_pointContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Number_hexContext number_hex() {
			return GetRuleContext<Number_hexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Number_binaryContext number_binary() {
			return GetRuleContext<Number_binaryContext>(0);
		}
		public NumericalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numerical; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumerical(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericalContext numerical() {
		NumericalContext _localctx = new NumericalContext(Context, State);
		EnterRule(_localctx, 36, RULE_numerical);
		try {
			State = 125;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 121;
				integer();
				}
				break;
			case FLOATING_POINT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 122;
				floating_point();
				}
				break;
			case NUMBER_HEX:
				EnterOuterAlt(_localctx, 3);
				{
				State = 123;
				number_hex();
				}
				break;
			case NUMBER_BINARY:
				EnterOuterAlt(_localctx, 4);
				{
				State = 124;
				number_binary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPRING() { return GetToken(LentoParser.SPRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 38, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			Match(SPRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharacterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(LentoParser.CHARACTER, 0); }
		public CharacterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_character; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharacterContext character() {
		CharacterContext _localctx = new CharacterContext(Context, State);
		EnterRule(_localctx, 40, RULE_character);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			Match(CHARACTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Typed_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_namespacedContext type_namespaced() {
			return GetRuleContext<Type_namespacedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_spContext whitespace_sp() {
			return GetRuleContext<Whitespace_spContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Typed_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typed_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTyped_identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Typed_identifierContext typed_identifier() {
		Typed_identifierContext _localctx = new Typed_identifierContext(Context, State);
		EnterRule(_localctx, 42, RULE_typed_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			type_namespaced();
			State = 132;
			whitespace_sp();
			State = 133;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LentoParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LentoParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_spContext[] whitespace_sp() {
			return GetRuleContexts<Whitespace_spContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_spContext whitespace_sp(int i) {
			return GetRuleContext<Whitespace_spContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEPARATOR_COMMA() { return GetTokens(LentoParser.SEPARATOR_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEPARATOR_COMMA(int i) {
			return GetToken(LentoParser.SEPARATOR_COMMA, i);
		}
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(Context, State);
		EnterRule(_localctx, 44, RULE_tuple);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			Match(LPAREN);
			State = 137;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 136;
				whitespace_sp();
				}
				break;
			}
			State = 153;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 139;
				expression(0);
				State = 150;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 141;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==SP || _la==COMMENT_MULTI) {
							{
							State = 140;
							whitespace_sp();
							}
						}

						State = 143;
						Match(SEPARATOR_COMMA);
						State = 145;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
						case 1:
							{
							State = 144;
							whitespace_sp();
							}
							break;
						}
						State = 147;
						expression(0);
						}
						} 
					}
					State = 152;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				}
				}
				break;
			}
			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SP || _la==COMMENT_MULTI) {
				{
				State = 155;
				whitespace_sp();
				}
			}

			State = 158;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tuple_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LentoParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LentoParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_spContext[] whitespace_sp() {
			return GetRuleContexts<Whitespace_spContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_spContext whitespace_sp(int i) {
			return GetRuleContext<Whitespace_spContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Typed_identifierContext[] typed_identifier() {
			return GetRuleContexts<Typed_identifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Typed_identifierContext typed_identifier(int i) {
			return GetRuleContext<Typed_identifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEPARATOR_COMMA() { return GetTokens(LentoParser.SEPARATOR_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEPARATOR_COMMA(int i) {
			return GetToken(LentoParser.SEPARATOR_COMMA, i);
		}
		public Tuple_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuple_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tuple_typeContext tuple_type() {
		Tuple_typeContext _localctx = new Tuple_typeContext(Context, State);
		EnterRule(_localctx, 46, RULE_tuple_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			Match(LPAREN);
			State = 162;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 161;
				whitespace_sp();
				}
				break;
			}
			State = 181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER || _la==IDENTIFIER_NAMESPACED) {
				{
				State = 164;
				typed_identifier();
				State = 166;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 165;
					whitespace_sp();
					}
					break;
				}
				State = 178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SEPARATOR_COMMA) {
					{
					{
					State = 168;
					Match(SEPARATOR_COMMA);
					State = 170;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==SP || _la==COMMENT_MULTI) {
						{
						State = 169;
						whitespace_sp();
						}
					}

					State = 172;
					typed_identifier();
					State = 174;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
					case 1:
						{
						State = 173;
						whitespace_sp();
						}
						break;
					}
					}
					}
					State = 180;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 184;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SP || _la==COMMENT_MULTI) {
				{
				State = 183;
				whitespace_sp();
				}
			}

			State = 186;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(LentoParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(LentoParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEPARATOR_COMMA() { return GetTokens(LentoParser.SEPARATOR_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEPARATOR_COMMA(int i) {
			return GetToken(LentoParser.SEPARATOR_COMMA, i);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 48, RULE_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			Match(LBRACKET);
			State = 197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SP) | (1L << NL) | (1L << COMMENT_MULTI) | (1L << INTEGER) | (1L << FLOATING_POINT) | (1L << NUMBER_HEX) | (1L << NUMBER_BINARY) | (1L << IDENTIFIER) | (1L << IDENTIFIER_NAMESPACED) | (1L << IDENTIFIER_IGNORE) | (1L << ATOM) | (1L << SPRING) | (1L << CHARACTER) | (1L << LPAREN) | (1L << LBRACKET) | (1L << OPERATOR))) != 0)) {
				{
				State = 189;
				expression(0);
				State = 194;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SEPARATOR_COMMA) {
					{
					{
					State = 190;
					Match(SEPARATOR_COMMA);
					State = 191;
					expression(0);
					}
					}
					State = 196;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 199;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(LentoParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(LentoParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_spContext[] whitespace_sp() {
			return GetRuleContexts<Whitespace_spContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_spContext whitespace_sp(int i) {
			return GetRuleContext<Whitespace_spContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_namespacedContext[] type_namespaced() {
			return GetRuleContexts<Type_namespacedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_namespacedContext type_namespaced(int i) {
			return GetRuleContext<Type_namespacedContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEPARATOR_COMMA() { return GetTokens(LentoParser.SEPARATOR_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEPARATOR_COMMA(int i) {
			return GetToken(LentoParser.SEPARATOR_COMMA, i);
		}
		public List_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List_typeContext list_type() {
		List_typeContext _localctx = new List_typeContext(Context, State);
		EnterRule(_localctx, 50, RULE_list_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			Match(LBRACKET);
			State = 203;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 202;
				whitespace_sp();
				}
				break;
			}
			State = 222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER || _la==IDENTIFIER_NAMESPACED) {
				{
				State = 205;
				type_namespaced();
				State = 207;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
				case 1:
					{
					State = 206;
					whitespace_sp();
					}
					break;
				}
				State = 219;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SEPARATOR_COMMA) {
					{
					{
					State = 209;
					Match(SEPARATOR_COMMA);
					State = 211;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==SP || _la==COMMENT_MULTI) {
						{
						State = 210;
						whitespace_sp();
						}
					}

					State = 213;
					type_namespaced();
					State = 215;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
					case 1:
						{
						State = 214;
						whitespace_sp();
						}
						break;
					}
					}
					}
					State = 221;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SP || _la==COMMENT_MULTI) {
				{
				State = 224;
				whitespace_sp();
				}
			}

			State = 227;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Map_elementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(LentoParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Map_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_map_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMap_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Map_elementContext map_element() {
		Map_elementContext _localctx = new Map_elementContext(Context, State);
		EnterRule(_localctx, 52, RULE_map_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			identifier();
			State = 230;
			Match(COLON);
			State = 231;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LentoParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Map_elementContext[] map_element() {
			return GetRuleContexts<Map_elementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Map_elementContext map_element(int i) {
			return GetRuleContext<Map_elementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LentoParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_spContext[] whitespace_sp() {
			return GetRuleContexts<Whitespace_spContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_spContext whitespace_sp(int i) {
			return GetRuleContext<Whitespace_spContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEPARATOR_COMMA() { return GetTokens(LentoParser.SEPARATOR_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEPARATOR_COMMA(int i) {
			return GetToken(LentoParser.SEPARATOR_COMMA, i);
		}
		public MapContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_map; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMap(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapContext map() {
		MapContext _localctx = new MapContext(Context, State);
		EnterRule(_localctx, 54, RULE_map);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233;
			Match(LPAREN);
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SP || _la==COMMENT_MULTI) {
				{
				State = 234;
				whitespace_sp();
				}
			}

			State = 237;
			map_element();
			State = 242;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEPARATOR_COMMA) {
				{
				{
				State = 238;
				Match(SEPARATOR_COMMA);
				State = 239;
				map_element();
				}
				}
				State = 244;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 246;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SP || _la==COMMENT_MULTI) {
				{
				State = 245;
				whitespace_sp();
				}
			}

			State = 248;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Map_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LentoParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Typed_identifierContext[] typed_identifier() {
			return GetRuleContexts<Typed_identifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Typed_identifierContext typed_identifier(int i) {
			return GetRuleContext<Typed_identifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LentoParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_spContext[] whitespace_sp() {
			return GetRuleContexts<Whitespace_spContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_spContext whitespace_sp(int i) {
			return GetRuleContext<Whitespace_spContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEPARATOR_COMMA() { return GetTokens(LentoParser.SEPARATOR_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEPARATOR_COMMA(int i) {
			return GetToken(LentoParser.SEPARATOR_COMMA, i);
		}
		public Map_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_map_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMap_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Map_typeContext map_type() {
		Map_typeContext _localctx = new Map_typeContext(Context, State);
		EnterRule(_localctx, 56, RULE_map_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250;
			Match(LPAREN);
			State = 252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SP || _la==COMMENT_MULTI) {
				{
				State = 251;
				whitespace_sp();
				}
			}

			State = 254;
			typed_identifier();
			State = 259;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEPARATOR_COMMA) {
				{
				{
				State = 255;
				Match(SEPARATOR_COMMA);
				State = 256;
				typed_identifier();
				}
				}
				State = 261;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 263;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SP || _la==COMMENT_MULTI) {
				{
				State = 262;
				whitespace_sp();
				}
			}

			State = 265;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(LentoParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(LentoParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_separatorContext[] expression_separator() {
			return GetRuleContexts<Expression_separatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_separatorContext expression_separator(int i) {
			return GetRuleContext<Expression_separatorContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 58, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			Match(LBRACE);
			State = 273;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SP) | (1L << NL) | (1L << COMMENT_MULTI) | (1L << INTEGER) | (1L << FLOATING_POINT) | (1L << NUMBER_HEX) | (1L << NUMBER_BINARY) | (1L << IDENTIFIER) | (1L << IDENTIFIER_NAMESPACED) | (1L << IDENTIFIER_IGNORE) | (1L << ATOM) | (1L << SPRING) | (1L << CHARACTER) | (1L << LPAREN) | (1L << LBRACKET) | (1L << OPERATOR))) != 0)) {
				{
				{
				State = 268;
				expression(0);
				State = 269;
				expression_separator();
				}
				}
				State = 275;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 276;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_name_namespacedContext function_name_namespaced() {
			return GetRuleContext<Function_name_namespacedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapContext map() {
			return GetRuleContext<MapContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_spContext[] whitespace_sp() {
			return GetRuleContexts<Whitespace_spContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_spContext whitespace_sp(int i) {
			return GetRuleContext<Whitespace_spContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 60, RULE_function_call);
		try {
			int _alt;
			State = 292;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 278;
				function_name_namespaced();
				State = 279;
				tuple();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 281;
				function_name_namespaced();
				State = 282;
				map();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 284;
				function_name_namespaced();
				State = 288;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 285;
						whitespace_sp();
						State = 286;
						expression(0);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 290;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_namespacedContext type_namespaced() {
			return GetRuleContext<Type_namespacedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_spContext[] whitespace_sp() {
			return GetRuleContexts<Whitespace_spContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_spContext whitespace_sp(int i) {
			return GetRuleContext<Whitespace_spContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Tuple_typeContext tuple_type() {
			return GetRuleContext<Tuple_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(LentoParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Function_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_declarationContext function_declaration() {
		Function_declarationContext _localctx = new Function_declarationContext(Context, State);
		EnterRule(_localctx, 62, RULE_function_declaration);
		int _la;
		try {
			State = 322;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 294;
				type_namespaced();
				State = 295;
				whitespace_sp();
				State = 296;
				function_name();
				State = 297;
				tuple_type();
				State = 299;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SP || _la==COMMENT_MULTI) {
					{
					State = 298;
					whitespace_sp();
					}
				}

				State = 304;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ASSIGN:
					{
					{
					State = 301;
					Match(ASSIGN);
					State = 302;
					expression(0);
					}
					}
					break;
				case LBRACE:
					{
					State = 303;
					block();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 306;
				type_namespaced();
				State = 307;
				whitespace_sp();
				State = 308;
				function_name();
				State = 314;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SP || _la==COMMENT_MULTI) {
					{
					{
					State = 309;
					whitespace_sp();
					State = 310;
					expression(0);
					}
					}
					State = 316;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 320;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ASSIGN:
					{
					{
					State = 317;
					Match(ASSIGN);
					State = 318;
					expression(0);
					}
					}
					break;
				case LBRACE:
					{
					State = 319;
					block();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_namespacedContext type_namespaced() {
			return GetRuleContext<Type_namespacedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_spContext whitespace_sp() {
			return GetRuleContext<Whitespace_spContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Variable_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declarationContext variable_declaration() {
		Variable_declarationContext _localctx = new Variable_declarationContext(Context, State);
		EnterRule(_localctx, 64, RULE_variable_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 324;
			type_namespaced();
			State = 325;
			whitespace_sp();
			State = 326;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_namespacedContext identifier_namespaced() {
			return GetRuleContext<Identifier_namespacedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(LentoParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_spContext[] whitespace_sp() {
			return GetRuleContexts<Whitespace_spContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_spContext whitespace_sp(int i) {
			return GetRuleContext<Whitespace_spContext>(i);
		}
		public Variable_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_assignmentContext variable_assignment() {
		Variable_assignmentContext _localctx = new Variable_assignmentContext(Context, State);
		EnterRule(_localctx, 66, RULE_variable_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328;
			identifier_namespaced();
			State = 330;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SP || _la==COMMENT_MULTI) {
				{
				State = 329;
				whitespace_sp();
				}
			}

			State = 332;
			Match(ASSIGN);
			State = 334;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				{
				State = 333;
				whitespace_sp();
				}
				break;
			}
			State = 338;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SP:
			case NL:
			case COMMENT_MULTI:
			case INTEGER:
			case FLOATING_POINT:
			case NUMBER_HEX:
			case NUMBER_BINARY:
			case IDENTIFIER:
			case IDENTIFIER_NAMESPACED:
			case IDENTIFIER_IGNORE:
			case ATOM:
			case SPRING:
			case CHARACTER:
			case LPAREN:
			case LBRACKET:
			case OPERATOR:
				{
				State = 336;
				expression(0);
				}
				break;
			case LBRACE:
				{
				State = 337;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_initializationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_namespacedContext type_namespaced() {
			return GetRuleContext<Type_namespacedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_spContext[] whitespace_sp() {
			return GetRuleContexts<Whitespace_spContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_spContext whitespace_sp(int i) {
			return GetRuleContext<Whitespace_spContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(LentoParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Variable_initializationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_initialization; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_initialization(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_initializationContext variable_initialization() {
		Variable_initializationContext _localctx = new Variable_initializationContext(Context, State);
		EnterRule(_localctx, 68, RULE_variable_initialization);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340;
			type_namespaced();
			State = 341;
			whitespace_sp();
			State = 342;
			identifier();
			State = 344;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SP || _la==COMMENT_MULTI) {
				{
				State = 343;
				whitespace_sp();
				}
			}

			State = 346;
			Match(ASSIGN);
			State = 348;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				{
				State = 347;
				whitespace_sp();
				}
				break;
			}
			State = 352;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SP:
			case NL:
			case COMMENT_MULTI:
			case INTEGER:
			case FLOATING_POINT:
			case NUMBER_HEX:
			case NUMBER_BINARY:
			case IDENTIFIER:
			case IDENTIFIER_NAMESPACED:
			case IDENTIFIER_IGNORE:
			case ATOM:
			case SPRING:
			case CHARACTER:
			case LPAREN:
			case LBRACKET:
			case OPERATOR:
				{
				State = 350;
				expression(0);
				}
				break;
			case LBRACE:
				{
				State = 351;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_separatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_nlContext whitespace_nl() {
			return GetRuleContext<Whitespace_nlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Semi_colonContext semi_colon() {
			return GetRuleContext<Semi_colonContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_spContext whitespace_sp() {
			return GetRuleContext<Whitespace_spContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_anyContext whitespace_any() {
			return GetRuleContext<Whitespace_anyContext>(0);
		}
		public Expression_separatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_separator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_separator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_separatorContext expression_separator() {
		Expression_separatorContext _localctx = new Expression_separatorContext(Context, State);
		EnterRule(_localctx, 70, RULE_expression_separator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
			case 1:
				{
				State = 354;
				whitespace_sp();
				}
				break;
			}
			State = 359;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NL:
			case COMMENT_MULTI:
				{
				State = 357;
				whitespace_nl();
				}
				break;
			case SEMI_COLON:
				{
				State = 358;
				semi_colon();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 362;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				{
				State = 361;
				whitespace_any();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_anyContext whitespace_any() {
			return GetRuleContext<Whitespace_anyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Operator_prefixContext operator_prefix() {
			return GetRuleContext<Operator_prefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_declarationContext function_declaration() {
			return GetRuleContext<Function_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_declarationContext variable_declaration() {
			return GetRuleContext<Variable_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_initializationContext variable_initialization() {
			return GetRuleContext<Variable_initializationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_assignmentContext variable_assignment() {
			return GetRuleContext<Variable_assignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_namespacedContext identifier_namespaced() {
			return GetRuleContext<Identifier_namespacedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Identifier_ignoreContext identifier_ignore() {
			return GetRuleContext<Identifier_ignoreContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericalContext numerical() {
			return GetRuleContext<NumericalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharacterContext character() {
			return GetRuleContext<CharacterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapContext map() {
			return GetRuleContext<MapContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Operator_infixContext operator_infix() {
			return GetRuleContext<Operator_infixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_spContext whitespace_sp() {
			return GetRuleContext<Whitespace_spContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 72;
		EnterRecursionRule(_localctx, 72, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 385;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				{
				State = 365;
				whitespace_any();
				State = 366;
				expression(18);
				}
				break;
			case 2:
				{
				State = 368;
				operator_prefix();
				State = 369;
				expression(15);
				}
				break;
			case 3:
				{
				State = 371;
				function_declaration();
				}
				break;
			case 4:
				{
				State = 372;
				variable_declaration();
				}
				break;
			case 5:
				{
				State = 373;
				variable_initialization();
				}
				break;
			case 6:
				{
				State = 374;
				variable_assignment();
				}
				break;
			case 7:
				{
				State = 375;
				identifier_namespaced();
				}
				break;
			case 8:
				{
				State = 376;
				identifier_ignore();
				}
				break;
			case 9:
				{
				State = 377;
				numerical();
				}
				break;
			case 10:
				{
				State = 378;
				character();
				}
				break;
			case 11:
				{
				State = 379;
				@string();
				}
				break;
			case 12:
				{
				State = 380;
				tuple();
				}
				break;
			case 13:
				{
				State = 381;
				list();
				}
				break;
			case 14:
				{
				State = 382;
				map();
				}
				break;
			case 15:
				{
				State = 383;
				atom();
				}
				break;
			case 16:
				{
				State = 384;
				function_call();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 395;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 393;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 387;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 388;
						operator_infix();
						State = 389;
						expression(17);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 391;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 392;
						whitespace_sp();
						}
						break;
					}
					} 
				}
				State = 397;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Compilation_unitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(LentoParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_separatorContext[] expression_separator() {
			return GetRuleContexts<Expression_separatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_separatorContext expression_separator(int i) {
			return GetRuleContext<Expression_separatorContext>(i);
		}
		public Compilation_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilation_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilation_unit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compilation_unitContext compilation_unit() {
		Compilation_unitContext _localctx = new Compilation_unitContext(Context, State);
		EnterRule(_localctx, 74, RULE_compilation_unit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 403;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SP) | (1L << NL) | (1L << COMMENT_MULTI) | (1L << INTEGER) | (1L << FLOATING_POINT) | (1L << NUMBER_HEX) | (1L << NUMBER_BINARY) | (1L << IDENTIFIER) | (1L << IDENTIFIER_NAMESPACED) | (1L << IDENTIFIER_IGNORE) | (1L << ATOM) | (1L << SPRING) | (1L << CHARACTER) | (1L << LPAREN) | (1L << LBRACKET) | (1L << OPERATOR))) != 0)) {
				{
				{
				State = 398;
				expression(0);
				State = 399;
				expression_separator();
				}
				}
				State = 405;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 406;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 36: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 16);
		case 1: return Precpred(Context, 17);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1D', '\x19B', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x3', '\x2', '\x6', '\x2', 'P', '\n', 
		'\x2', '\r', '\x2', '\xE', '\x2', 'Q', '\x3', '\x3', '\x6', '\x3', 'U', 
		'\n', '\x3', '\r', '\x3', '\xE', '\x3', 'V', '\x3', '\x4', '\x6', '\x4', 
		'Z', '\n', '\x4', '\r', '\x4', '\xE', '\x4', '[', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x5', '\x14', '\x80', '\n', '\x14', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x8C', 
		'\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x90', '\n', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x94', '\n', '\x18', 
		'\x3', '\x18', '\a', '\x18', '\x97', '\n', '\x18', '\f', '\x18', '\xE', 
		'\x18', '\x9A', '\v', '\x18', '\x5', '\x18', '\x9C', '\n', '\x18', '\x3', 
		'\x18', '\x5', '\x18', '\x9F', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\xA5', '\n', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x5', '\x19', '\xA9', '\n', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x5', '\x19', '\xAD', '\n', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x5', '\x19', '\xB1', '\n', '\x19', '\a', '\x19', '\xB3', '\n', 
		'\x19', '\f', '\x19', '\xE', '\x19', '\xB6', '\v', '\x19', '\x5', '\x19', 
		'\xB8', '\n', '\x19', '\x3', '\x19', '\x5', '\x19', '\xBB', '\n', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\a', '\x1A', '\xC3', '\n', '\x1A', '\f', '\x1A', '\xE', 
		'\x1A', '\xC6', '\v', '\x1A', '\x5', '\x1A', '\xC8', '\n', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\xCE', 
		'\n', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\xD2', '\n', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\xD6', '\n', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\xDA', '\n', '\x1B', '\a', 
		'\x1B', '\xDC', '\n', '\x1B', '\f', '\x1B', '\xE', '\x1B', '\xDF', '\v', 
		'\x1B', '\x5', '\x1B', '\xE1', '\n', '\x1B', '\x3', '\x1B', '\x5', '\x1B', 
		'\xE4', '\n', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x5', 
		'\x1D', '\xEE', '\n', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\a', '\x1D', '\xF3', '\n', '\x1D', '\f', '\x1D', '\xE', '\x1D', '\xF6', 
		'\v', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\xF9', '\n', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\xFF', 
		'\n', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\a', '\x1E', 
		'\x104', '\n', '\x1E', '\f', '\x1E', '\xE', '\x1E', '\x107', '\v', '\x1E', 
		'\x3', '\x1E', '\x5', '\x1E', '\x10A', '\n', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\a', 
		'\x1F', '\x112', '\n', '\x1F', '\f', '\x1F', '\xE', '\x1F', '\x115', '\v', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x3', ' ', '\x6', ' ', '\x123', '\n', ' ', '\r', ' ', '\xE', ' ', '\x124', 
		'\x5', ' ', '\x127', '\n', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\x5', '!', '\x12E', '\n', '!', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\x5', '!', '\x133', '\n', '!', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\x3', '!', '\x3', '!', '\a', '!', '\x13B', '\n', '!', 
		'\f', '!', '\xE', '!', '\x13E', '\v', '!', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x5', '!', '\x143', '\n', '!', '\x5', '!', '\x145', '\n', '!', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', '#', '\x5', 
		'#', '\x14D', '\n', '#', '\x3', '#', '\x3', '#', '\x5', '#', '\x151', 
		'\n', '#', '\x3', '#', '\x3', '#', '\x5', '#', '\x155', '\n', '#', '\x3', 
		'$', '\x3', '$', '\x3', '$', '\x3', '$', '\x5', '$', '\x15B', '\n', '$', 
		'\x3', '$', '\x3', '$', '\x5', '$', '\x15F', '\n', '$', '\x3', '$', '\x3', 
		'$', '\x5', '$', '\x163', '\n', '$', '\x3', '%', '\x5', '%', '\x166', 
		'\n', '%', '\x3', '%', '\x3', '%', '\x5', '%', '\x16A', '\n', '%', '\x3', 
		'%', '\x5', '%', '\x16D', '\n', '%', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x5', '&', '\x184', '\n', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\a', '&', '\x18C', '\n', '&', '\f', '&', 
		'\xE', '&', '\x18F', '\v', '&', '\x3', '\'', '\x3', '\'', '\x3', '\'', 
		'\a', '\'', '\x194', '\n', '\'', '\f', '\'', '\xE', '\'', '\x197', '\v', 
		'\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x2', '\x3', 'J', '(', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', 
		'\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', 
		'\x46', 'H', 'J', 'L', '\x2', '\x6', '\x4', '\x2', '\x3', '\x4', '\x6', 
		'\x6', '\x4', '\x2', '\x3', '\x3', '\x6', '\x6', '\x4', '\x2', '\x4', 
		'\x4', '\x6', '\x6', '\x3', '\x2', '\v', '\f', '\x2', '\x1BA', '\x2', 
		'O', '\x3', '\x2', '\x2', '\x2', '\x4', 'T', '\x3', '\x2', '\x2', '\x2', 
		'\x6', 'Y', '\x3', '\x2', '\x2', '\x2', '\b', ']', '\x3', '\x2', '\x2', 
		'\x2', '\n', '_', '\x3', '\x2', '\x2', '\x2', '\f', '\x61', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\x63', '\x3', '\x2', '\x2', '\x2', '\x10', '\x65', 
		'\x3', '\x2', '\x2', '\x2', '\x12', 'g', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'i', '\x3', '\x2', '\x2', '\x2', '\x16', 'k', '\x3', '\x2', '\x2', '\x2', 
		'\x18', 'm', '\x3', '\x2', '\x2', '\x2', '\x1A', 'o', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', 'q', '\x3', '\x2', '\x2', '\x2', '\x1E', 's', '\x3', '\x2', 
		'\x2', '\x2', ' ', 'u', '\x3', '\x2', '\x2', '\x2', '\"', 'w', '\x3', 
		'\x2', '\x2', '\x2', '$', 'y', '\x3', '\x2', '\x2', '\x2', '&', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '(', '\x81', '\x3', '\x2', '\x2', '\x2', '*', 
		'\x83', '\x3', '\x2', '\x2', '\x2', ',', '\x85', '\x3', '\x2', '\x2', 
		'\x2', '.', '\x89', '\x3', '\x2', '\x2', '\x2', '\x30', '\xA2', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '\xBE', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\xCB', '\x3', '\x2', '\x2', '\x2', '\x36', '\xE7', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '\xEB', '\x3', '\x2', '\x2', '\x2', ':', '\xFC', '\x3', 
		'\x2', '\x2', '\x2', '<', '\x10D', '\x3', '\x2', '\x2', '\x2', '>', '\x126', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x144', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x146', '\x3', '\x2', '\x2', '\x2', '\x44', '\x14A', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x156', '\x3', '\x2', '\x2', '\x2', 'H', '\x165', 
		'\x3', '\x2', '\x2', '\x2', 'J', '\x183', '\x3', '\x2', '\x2', '\x2', 
		'L', '\x195', '\x3', '\x2', '\x2', '\x2', 'N', 'P', '\t', '\x2', '\x2', 
		'\x2', 'O', 'N', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\x3', '\x2', '\x2', 
		'\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', 
		'\x2', 'R', '\x3', '\x3', '\x2', '\x2', '\x2', 'S', 'U', '\t', '\x3', 
		'\x2', '\x2', 'T', 'S', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'T', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\x3', '\x2', 
		'\x2', '\x2', 'W', '\x5', '\x3', '\x2', '\x2', '\x2', 'X', 'Z', '\t', 
		'\x4', '\x2', '\x2', 'Y', 'X', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\x3', 
		'\x2', '\x2', '\x2', '[', 'Y', '\x3', '\x2', '\x2', '\x2', '[', '\\', 
		'\x3', '\x2', '\x2', '\x2', '\\', '\a', '\x3', '\x2', '\x2', '\x2', ']', 
		'^', '\a', '\x1C', '\x2', '\x2', '^', '\t', '\x3', '\x2', '\x2', '\x2', 
		'_', '`', '\a', '\xE', '\x2', '\x2', '`', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\x61', '\x62', '\a', '\v', '\x2', '\x2', '\x62', '\r', '\x3', '\x2', 
		'\x2', '\x2', '\x63', '\x64', '\t', '\x5', '\x2', '\x2', '\x64', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\a', '\v', '\x2', '\x2', 
		'\x66', '\x11', '\x3', '\x2', '\x2', '\x2', 'g', 'h', '\t', '\x5', '\x2', 
		'\x2', 'h', '\x13', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\a', '\r', 
		'\x2', '\x2', 'j', '\x15', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\a', 
		'\v', '\x2', '\x2', 'l', '\x17', '\x3', '\x2', '\x2', '\x2', 'm', 'n', 
		'\t', '\x5', '\x2', '\x2', 'n', '\x19', '\x3', '\x2', '\x2', '\x2', 'o', 
		'p', '\a', '\x1D', '\x2', '\x2', 'p', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'q', 'r', '\a', '\x1D', '\x2', '\x2', 'r', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', 's', 't', '\a', '\a', '\x2', '\x2', 't', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', 'u', 'v', '\a', '\b', '\x2', '\x2', 'v', '!', '\x3', '\x2', 
		'\x2', '\x2', 'w', 'x', '\a', '\t', '\x2', '\x2', 'x', '#', '\x3', '\x2', 
		'\x2', '\x2', 'y', 'z', '\a', '\n', '\x2', '\x2', 'z', '%', '\x3', '\x2', 
		'\x2', '\x2', '{', '\x80', '\x5', '\x1E', '\x10', '\x2', '|', '\x80', 
		'\x5', ' ', '\x11', '\x2', '}', '\x80', '\x5', '\"', '\x12', '\x2', '~', 
		'\x80', '\x5', '$', '\x13', '\x2', '\x7F', '{', '\x3', '\x2', '\x2', '\x2', 
		'\x7F', '|', '\x3', '\x2', '\x2', '\x2', '\x7F', '}', '\x3', '\x2', '\x2', 
		'\x2', '\x7F', '~', '\x3', '\x2', '\x2', '\x2', '\x80', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\x81', '\x82', '\a', '\x10', '\x2', '\x2', '\x82', ')', 
		'\x3', '\x2', '\x2', '\x2', '\x83', '\x84', '\a', '\x11', '\x2', '\x2', 
		'\x84', '+', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\x5', '\xE', 
		'\b', '\x2', '\x86', '\x87', '\x5', '\x4', '\x3', '\x2', '\x87', '\x88', 
		'\x5', '\x10', '\t', '\x2', '\x88', '-', '\x3', '\x2', '\x2', '\x2', '\x89', 
		'\x8B', '\a', '\x12', '\x2', '\x2', '\x8A', '\x8C', '\x5', '\x4', '\x3', 
		'\x2', '\x8B', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', '\x3', 
		'\x2', '\x2', '\x2', '\x8C', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x8D', 
		'\x98', '\x5', 'J', '&', '\x2', '\x8E', '\x90', '\x5', '\x4', '\x3', '\x2', 
		'\x8F', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\x3', '\x2', 
		'\x2', '\x2', '\x90', '\x91', '\x3', '\x2', '\x2', '\x2', '\x91', '\x93', 
		'\a', '\x19', '\x2', '\x2', '\x92', '\x94', '\x5', '\x4', '\x3', '\x2', 
		'\x93', '\x92', '\x3', '\x2', '\x2', '\x2', '\x93', '\x94', '\x3', '\x2', 
		'\x2', '\x2', '\x94', '\x95', '\x3', '\x2', '\x2', '\x2', '\x95', '\x97', 
		'\x5', 'J', '&', '\x2', '\x96', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x97', 
		'\x9A', '\x3', '\x2', '\x2', '\x2', '\x98', '\x96', '\x3', '\x2', '\x2', 
		'\x2', '\x98', '\x99', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9C', '\x3', 
		'\x2', '\x2', '\x2', '\x9A', '\x98', '\x3', '\x2', '\x2', '\x2', '\x9B', 
		'\x8D', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', '\x3', '\x2', '\x2', 
		'\x2', '\x9C', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9F', '\x5', 
		'\x4', '\x3', '\x2', '\x9E', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9E', 
		'\x9F', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', '\x3', '\x2', '\x2', 
		'\x2', '\xA0', '\xA1', '\a', '\x13', '\x2', '\x2', '\xA1', '/', '\x3', 
		'\x2', '\x2', '\x2', '\xA2', '\xA4', '\a', '\x12', '\x2', '\x2', '\xA3', 
		'\xA5', '\x5', '\x4', '\x3', '\x2', '\xA4', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', '\xA4', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xB7', '\x3', 
		'\x2', '\x2', '\x2', '\xA6', '\xA8', '\x5', ',', '\x17', '\x2', '\xA7', 
		'\xA9', '\x5', '\x4', '\x3', '\x2', '\xA8', '\xA7', '\x3', '\x2', '\x2', 
		'\x2', '\xA8', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xB4', '\x3', 
		'\x2', '\x2', '\x2', '\xAA', '\xAC', '\a', '\x19', '\x2', '\x2', '\xAB', 
		'\xAD', '\x5', '\x4', '\x3', '\x2', '\xAC', '\xAB', '\x3', '\x2', '\x2', 
		'\x2', '\xAC', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', '\x3', 
		'\x2', '\x2', '\x2', '\xAE', '\xB0', '\x5', ',', '\x17', '\x2', '\xAF', 
		'\xB1', '\x5', '\x4', '\x3', '\x2', '\xB0', '\xAF', '\x3', '\x2', '\x2', 
		'\x2', '\xB0', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\xB2', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xB3', 
		'\xB6', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB2', '\x3', '\x2', '\x2', 
		'\x2', '\xB4', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB8', '\x3', 
		'\x2', '\x2', '\x2', '\xB6', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB7', 
		'\xA6', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB8', '\x3', '\x2', '\x2', 
		'\x2', '\xB8', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBB', '\x5', 
		'\x4', '\x3', '\x2', '\xBA', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xBA', 
		'\xBB', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBC', '\x3', '\x2', '\x2', 
		'\x2', '\xBC', '\xBD', '\a', '\x13', '\x2', '\x2', '\xBD', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\xBE', '\xC7', '\a', '\x14', '\x2', '\x2', '\xBF', 
		'\xC4', '\x5', 'J', '&', '\x2', '\xC0', '\xC1', '\a', '\x19', '\x2', '\x2', 
		'\xC1', '\xC3', '\x5', 'J', '&', '\x2', '\xC2', '\xC0', '\x3', '\x2', 
		'\x2', '\x2', '\xC3', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC2', 
		'\x3', '\x2', '\x2', '\x2', '\xC4', '\xC5', '\x3', '\x2', '\x2', '\x2', 
		'\xC5', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC4', '\x3', '\x2', 
		'\x2', '\x2', '\xC7', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', 
		'\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', '\x3', '\x2', '\x2', '\x2', 
		'\xC9', '\xCA', '\a', '\x15', '\x2', '\x2', '\xCA', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\xCB', '\xCD', '\a', '\x14', '\x2', '\x2', '\xCC', '\xCE', 
		'\x5', '\x4', '\x3', '\x2', '\xCD', '\xCC', '\x3', '\x2', '\x2', '\x2', 
		'\xCD', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xE0', '\x3', '\x2', 
		'\x2', '\x2', '\xCF', '\xD1', '\x5', '\xE', '\b', '\x2', '\xD0', '\xD2', 
		'\x5', '\x4', '\x3', '\x2', '\xD1', '\xD0', '\x3', '\x2', '\x2', '\x2', 
		'\xD1', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xDD', '\x3', '\x2', 
		'\x2', '\x2', '\xD3', '\xD5', '\a', '\x19', '\x2', '\x2', '\xD4', '\xD6', 
		'\x5', '\x4', '\x3', '\x2', '\xD5', '\xD4', '\x3', '\x2', '\x2', '\x2', 
		'\xD5', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD7', '\x3', '\x2', 
		'\x2', '\x2', '\xD7', '\xD9', '\x5', '\xE', '\b', '\x2', '\xD8', '\xDA', 
		'\x5', '\x4', '\x3', '\x2', '\xD9', '\xD8', '\x3', '\x2', '\x2', '\x2', 
		'\xD9', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xDC', '\x3', '\x2', 
		'\x2', '\x2', '\xDB', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDF', 
		'\x3', '\x2', '\x2', '\x2', '\xDD', '\xDB', '\x3', '\x2', '\x2', '\x2', 
		'\xDD', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xE1', '\x3', '\x2', 
		'\x2', '\x2', '\xDF', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xCF', 
		'\x3', '\x2', '\x2', '\x2', '\xE0', '\xE1', '\x3', '\x2', '\x2', '\x2', 
		'\xE1', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE4', '\x5', '\x4', 
		'\x3', '\x2', '\xE3', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', 
		'\x3', '\x2', '\x2', '\x2', '\xE4', '\xE5', '\x3', '\x2', '\x2', '\x2', 
		'\xE5', '\xE6', '\a', '\x15', '\x2', '\x2', '\xE6', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\xE7', '\xE8', '\x5', '\x10', '\t', '\x2', '\xE8', '\xE9', 
		'\a', '\x1B', '\x2', '\x2', '\xE9', '\xEA', '\x5', 'J', '&', '\x2', '\xEA', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xED', '\a', '\x12', '\x2', 
		'\x2', '\xEC', '\xEE', '\x5', '\x4', '\x3', '\x2', '\xED', '\xEC', '\x3', 
		'\x2', '\x2', '\x2', '\xED', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xEE', 
		'\xEF', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF4', '\x5', '\x36', '\x1C', 
		'\x2', '\xF0', '\xF1', '\a', '\x19', '\x2', '\x2', '\xF1', '\xF3', '\x5', 
		'\x36', '\x1C', '\x2', '\xF2', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF3', 
		'\xF6', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF2', '\x3', '\x2', '\x2', 
		'\x2', '\xF4', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF8', '\x3', 
		'\x2', '\x2', '\x2', '\xF6', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF7', 
		'\xF9', '\x5', '\x4', '\x3', '\x2', '\xF8', '\xF7', '\x3', '\x2', '\x2', 
		'\x2', '\xF8', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFA', '\x3', 
		'\x2', '\x2', '\x2', '\xFA', '\xFB', '\a', '\x13', '\x2', '\x2', '\xFB', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFE', '\a', '\x12', '\x2', 
		'\x2', '\xFD', '\xFF', '\x5', '\x4', '\x3', '\x2', '\xFE', '\xFD', '\x3', 
		'\x2', '\x2', '\x2', '\xFE', '\xFF', '\x3', '\x2', '\x2', '\x2', '\xFF', 
		'\x100', '\x3', '\x2', '\x2', '\x2', '\x100', '\x105', '\x5', ',', '\x17', 
		'\x2', '\x101', '\x102', '\a', '\x19', '\x2', '\x2', '\x102', '\x104', 
		'\x5', ',', '\x17', '\x2', '\x103', '\x101', '\x3', '\x2', '\x2', '\x2', 
		'\x104', '\x107', '\x3', '\x2', '\x2', '\x2', '\x105', '\x103', '\x3', 
		'\x2', '\x2', '\x2', '\x105', '\x106', '\x3', '\x2', '\x2', '\x2', '\x106', 
		'\x109', '\x3', '\x2', '\x2', '\x2', '\x107', '\x105', '\x3', '\x2', '\x2', 
		'\x2', '\x108', '\x10A', '\x5', '\x4', '\x3', '\x2', '\x109', '\x108', 
		'\x3', '\x2', '\x2', '\x2', '\x109', '\x10A', '\x3', '\x2', '\x2', '\x2', 
		'\x10A', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x10C', '\a', 
		'\x13', '\x2', '\x2', '\x10C', ';', '\x3', '\x2', '\x2', '\x2', '\x10D', 
		'\x113', '\a', '\x16', '\x2', '\x2', '\x10E', '\x10F', '\x5', 'J', '&', 
		'\x2', '\x10F', '\x110', '\x5', 'H', '%', '\x2', '\x110', '\x112', '\x3', 
		'\x2', '\x2', '\x2', '\x111', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x112', 
		'\x115', '\x3', '\x2', '\x2', '\x2', '\x113', '\x111', '\x3', '\x2', '\x2', 
		'\x2', '\x113', '\x114', '\x3', '\x2', '\x2', '\x2', '\x114', '\x116', 
		'\x3', '\x2', '\x2', '\x2', '\x115', '\x113', '\x3', '\x2', '\x2', '\x2', 
		'\x116', '\x117', '\a', '\x17', '\x2', '\x2', '\x117', '=', '\x3', '\x2', 
		'\x2', '\x2', '\x118', '\x119', '\x5', '\x18', '\r', '\x2', '\x119', '\x11A', 
		'\x5', '.', '\x18', '\x2', '\x11A', '\x127', '\x3', '\x2', '\x2', '\x2', 
		'\x11B', '\x11C', '\x5', '\x18', '\r', '\x2', '\x11C', '\x11D', '\x5', 
		'\x38', '\x1D', '\x2', '\x11D', '\x127', '\x3', '\x2', '\x2', '\x2', '\x11E', 
		'\x122', '\x5', '\x18', '\r', '\x2', '\x11F', '\x120', '\x5', '\x4', '\x3', 
		'\x2', '\x120', '\x121', '\x5', 'J', '&', '\x2', '\x121', '\x123', '\x3', 
		'\x2', '\x2', '\x2', '\x122', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x123', 
		'\x124', '\x3', '\x2', '\x2', '\x2', '\x124', '\x122', '\x3', '\x2', '\x2', 
		'\x2', '\x124', '\x125', '\x3', '\x2', '\x2', '\x2', '\x125', '\x127', 
		'\x3', '\x2', '\x2', '\x2', '\x126', '\x118', '\x3', '\x2', '\x2', '\x2', 
		'\x126', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x126', '\x11E', '\x3', 
		'\x2', '\x2', '\x2', '\x127', '?', '\x3', '\x2', '\x2', '\x2', '\x128', 
		'\x129', '\x5', '\xE', '\b', '\x2', '\x129', '\x12A', '\x5', '\x4', '\x3', 
		'\x2', '\x12A', '\x12B', '\x5', '\x16', '\f', '\x2', '\x12B', '\x12D', 
		'\x5', '\x30', '\x19', '\x2', '\x12C', '\x12E', '\x5', '\x4', '\x3', '\x2', 
		'\x12D', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12E', '\x3', 
		'\x2', '\x2', '\x2', '\x12E', '\x132', '\x3', '\x2', '\x2', '\x2', '\x12F', 
		'\x130', '\a', '\x18', '\x2', '\x2', '\x130', '\x133', '\x5', 'J', '&', 
		'\x2', '\x131', '\x133', '\x5', '<', '\x1F', '\x2', '\x132', '\x12F', 
		'\x3', '\x2', '\x2', '\x2', '\x132', '\x131', '\x3', '\x2', '\x2', '\x2', 
		'\x133', '\x145', '\x3', '\x2', '\x2', '\x2', '\x134', '\x135', '\x5', 
		'\xE', '\b', '\x2', '\x135', '\x136', '\x5', '\x4', '\x3', '\x2', '\x136', 
		'\x13C', '\x5', '\x16', '\f', '\x2', '\x137', '\x138', '\x5', '\x4', '\x3', 
		'\x2', '\x138', '\x139', '\x5', 'J', '&', '\x2', '\x139', '\x13B', '\x3', 
		'\x2', '\x2', '\x2', '\x13A', '\x137', '\x3', '\x2', '\x2', '\x2', '\x13B', 
		'\x13E', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x13A', '\x3', '\x2', '\x2', 
		'\x2', '\x13C', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x13D', '\x142', 
		'\x3', '\x2', '\x2', '\x2', '\x13E', '\x13C', '\x3', '\x2', '\x2', '\x2', 
		'\x13F', '\x140', '\a', '\x18', '\x2', '\x2', '\x140', '\x143', '\x5', 
		'J', '&', '\x2', '\x141', '\x143', '\x5', '<', '\x1F', '\x2', '\x142', 
		'\x13F', '\x3', '\x2', '\x2', '\x2', '\x142', '\x141', '\x3', '\x2', '\x2', 
		'\x2', '\x143', '\x145', '\x3', '\x2', '\x2', '\x2', '\x144', '\x128', 
		'\x3', '\x2', '\x2', '\x2', '\x144', '\x134', '\x3', '\x2', '\x2', '\x2', 
		'\x145', '\x41', '\x3', '\x2', '\x2', '\x2', '\x146', '\x147', '\x5', 
		'\xE', '\b', '\x2', '\x147', '\x148', '\x5', '\x4', '\x3', '\x2', '\x148', 
		'\x149', '\x5', '\x10', '\t', '\x2', '\x149', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '\x14A', '\x14C', '\x5', '\x12', '\n', '\x2', '\x14B', '\x14D', 
		'\x5', '\x4', '\x3', '\x2', '\x14C', '\x14B', '\x3', '\x2', '\x2', '\x2', 
		'\x14C', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x14E', '\x3', 
		'\x2', '\x2', '\x2', '\x14E', '\x150', '\a', '\x18', '\x2', '\x2', '\x14F', 
		'\x151', '\x5', '\x4', '\x3', '\x2', '\x150', '\x14F', '\x3', '\x2', '\x2', 
		'\x2', '\x150', '\x151', '\x3', '\x2', '\x2', '\x2', '\x151', '\x154', 
		'\x3', '\x2', '\x2', '\x2', '\x152', '\x155', '\x5', 'J', '&', '\x2', 
		'\x153', '\x155', '\x5', '<', '\x1F', '\x2', '\x154', '\x152', '\x3', 
		'\x2', '\x2', '\x2', '\x154', '\x153', '\x3', '\x2', '\x2', '\x2', '\x155', 
		'\x45', '\x3', '\x2', '\x2', '\x2', '\x156', '\x157', '\x5', '\xE', '\b', 
		'\x2', '\x157', '\x158', '\x5', '\x4', '\x3', '\x2', '\x158', '\x15A', 
		'\x5', '\x10', '\t', '\x2', '\x159', '\x15B', '\x5', '\x4', '\x3', '\x2', 
		'\x15A', '\x159', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x15B', '\x3', 
		'\x2', '\x2', '\x2', '\x15B', '\x15C', '\x3', '\x2', '\x2', '\x2', '\x15C', 
		'\x15E', '\a', '\x18', '\x2', '\x2', '\x15D', '\x15F', '\x5', '\x4', '\x3', 
		'\x2', '\x15E', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x15F', 
		'\x3', '\x2', '\x2', '\x2', '\x15F', '\x162', '\x3', '\x2', '\x2', '\x2', 
		'\x160', '\x163', '\x5', 'J', '&', '\x2', '\x161', '\x163', '\x5', '<', 
		'\x1F', '\x2', '\x162', '\x160', '\x3', '\x2', '\x2', '\x2', '\x162', 
		'\x161', '\x3', '\x2', '\x2', '\x2', '\x163', 'G', '\x3', '\x2', '\x2', 
		'\x2', '\x164', '\x166', '\x5', '\x4', '\x3', '\x2', '\x165', '\x164', 
		'\x3', '\x2', '\x2', '\x2', '\x165', '\x166', '\x3', '\x2', '\x2', '\x2', 
		'\x166', '\x169', '\x3', '\x2', '\x2', '\x2', '\x167', '\x16A', '\x5', 
		'\x6', '\x4', '\x2', '\x168', '\x16A', '\x5', '\b', '\x5', '\x2', '\x169', 
		'\x167', '\x3', '\x2', '\x2', '\x2', '\x169', '\x168', '\x3', '\x2', '\x2', 
		'\x2', '\x16A', '\x16C', '\x3', '\x2', '\x2', '\x2', '\x16B', '\x16D', 
		'\x5', '\x2', '\x2', '\x2', '\x16C', '\x16B', '\x3', '\x2', '\x2', '\x2', 
		'\x16C', '\x16D', '\x3', '\x2', '\x2', '\x2', '\x16D', 'I', '\x3', '\x2', 
		'\x2', '\x2', '\x16E', '\x16F', '\b', '&', '\x1', '\x2', '\x16F', '\x170', 
		'\x5', '\x2', '\x2', '\x2', '\x170', '\x171', '\x5', 'J', '&', '\x14', 
		'\x171', '\x184', '\x3', '\x2', '\x2', '\x2', '\x172', '\x173', '\x5', 
		'\x1C', '\xF', '\x2', '\x173', '\x174', '\x5', 'J', '&', '\x11', '\x174', 
		'\x184', '\x3', '\x2', '\x2', '\x2', '\x175', '\x184', '\x5', '@', '!', 
		'\x2', '\x176', '\x184', '\x5', '\x42', '\"', '\x2', '\x177', '\x184', 
		'\x5', '\x46', '$', '\x2', '\x178', '\x184', '\x5', '\x44', '#', '\x2', 
		'\x179', '\x184', '\x5', '\x12', '\n', '\x2', '\x17A', '\x184', '\x5', 
		'\x14', '\v', '\x2', '\x17B', '\x184', '\x5', '&', '\x14', '\x2', '\x17C', 
		'\x184', '\x5', '*', '\x16', '\x2', '\x17D', '\x184', '\x5', '(', '\x15', 
		'\x2', '\x17E', '\x184', '\x5', '.', '\x18', '\x2', '\x17F', '\x184', 
		'\x5', '\x32', '\x1A', '\x2', '\x180', '\x184', '\x5', '\x38', '\x1D', 
		'\x2', '\x181', '\x184', '\x5', '\n', '\x6', '\x2', '\x182', '\x184', 
		'\x5', '>', ' ', '\x2', '\x183', '\x16E', '\x3', '\x2', '\x2', '\x2', 
		'\x183', '\x172', '\x3', '\x2', '\x2', '\x2', '\x183', '\x175', '\x3', 
		'\x2', '\x2', '\x2', '\x183', '\x176', '\x3', '\x2', '\x2', '\x2', '\x183', 
		'\x177', '\x3', '\x2', '\x2', '\x2', '\x183', '\x178', '\x3', '\x2', '\x2', 
		'\x2', '\x183', '\x179', '\x3', '\x2', '\x2', '\x2', '\x183', '\x17A', 
		'\x3', '\x2', '\x2', '\x2', '\x183', '\x17B', '\x3', '\x2', '\x2', '\x2', 
		'\x183', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x183', '\x17D', '\x3', 
		'\x2', '\x2', '\x2', '\x183', '\x17E', '\x3', '\x2', '\x2', '\x2', '\x183', 
		'\x17F', '\x3', '\x2', '\x2', '\x2', '\x183', '\x180', '\x3', '\x2', '\x2', 
		'\x2', '\x183', '\x181', '\x3', '\x2', '\x2', '\x2', '\x183', '\x182', 
		'\x3', '\x2', '\x2', '\x2', '\x184', '\x18D', '\x3', '\x2', '\x2', '\x2', 
		'\x185', '\x186', '\f', '\x12', '\x2', '\x2', '\x186', '\x187', '\x5', 
		'\x1A', '\xE', '\x2', '\x187', '\x188', '\x5', 'J', '&', '\x13', '\x188', 
		'\x18C', '\x3', '\x2', '\x2', '\x2', '\x189', '\x18A', '\f', '\x13', '\x2', 
		'\x2', '\x18A', '\x18C', '\x5', '\x4', '\x3', '\x2', '\x18B', '\x185', 
		'\x3', '\x2', '\x2', '\x2', '\x18B', '\x189', '\x3', '\x2', '\x2', '\x2', 
		'\x18C', '\x18F', '\x3', '\x2', '\x2', '\x2', '\x18D', '\x18B', '\x3', 
		'\x2', '\x2', '\x2', '\x18D', '\x18E', '\x3', '\x2', '\x2', '\x2', '\x18E', 
		'K', '\x3', '\x2', '\x2', '\x2', '\x18F', '\x18D', '\x3', '\x2', '\x2', 
		'\x2', '\x190', '\x191', '\x5', 'J', '&', '\x2', '\x191', '\x192', '\x5', 
		'H', '%', '\x2', '\x192', '\x194', '\x3', '\x2', '\x2', '\x2', '\x193', 
		'\x190', '\x3', '\x2', '\x2', '\x2', '\x194', '\x197', '\x3', '\x2', '\x2', 
		'\x2', '\x195', '\x193', '\x3', '\x2', '\x2', '\x2', '\x195', '\x196', 
		'\x3', '\x2', '\x2', '\x2', '\x196', '\x198', '\x3', '\x2', '\x2', '\x2', 
		'\x197', '\x195', '\x3', '\x2', '\x2', '\x2', '\x198', '\x199', '\a', 
		'\x2', '\x2', '\x3', '\x199', 'M', '\x3', '\x2', '\x2', '\x2', '\x37', 
		'Q', 'V', '[', '\x7F', '\x8B', '\x8F', '\x93', '\x98', '\x9B', '\x9E', 
		'\xA4', '\xA8', '\xAC', '\xB0', '\xB4', '\xB7', '\xBA', '\xC4', '\xC7', 
		'\xCD', '\xD1', '\xD5', '\xD9', '\xDD', '\xE0', '\xE3', '\xED', '\xF4', 
		'\xF8', '\xFE', '\x105', '\x109', '\x113', '\x124', '\x126', '\x12D', 
		'\x132', '\x13C', '\x142', '\x144', '\x14C', '\x150', '\x154', '\x15A', 
		'\x15E', '\x162', '\x165', '\x169', '\x16C', '\x183', '\x18B', '\x18D', 
		'\x195',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace LentoCore.Parser
