//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Grammar\LentoParser.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LentoCore.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class LentoParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SP=1, NL=2, COMMENT_SINGLE=3, COMMENT_MULTI=4, INTEGER=5, FLOATING_POINT=6, 
		NUMBER_HEX=7, NUMBER_BINARY=8, IDENTIFIER_SPECIAL=9, IDENTIFIER=10, IGNORE_IDENTIFIER=11, 
		ATOM=12, FUNCTION_NAME=13, TYPE=14, ESCAPED=15, SPRING=16, CHARACTER=17, 
		LPAREN=18, RPAREN=19, LBRACKET=20, RBRACKET=21, LBRACE=22, RBRACE=23, 
		ASSIGN=24, SEPARATOR_COMMA=25, COLON=26, SEMI_COLON=27, OPERATOR_PREFIX=28, 
		OPERATOR_INFIX=29;
	public const int
		RULE_whitespace_any = 0, RULE_whitespace_sp = 1, RULE_whitespace_nl = 2, 
		RULE_atom = 3, RULE_identifier = 4, RULE_integer = 5, RULE_floating_point = 6, 
		RULE_number_hex = 7, RULE_number_binary = 8, RULE_numerical = 9, RULE_string = 10, 
		RULE_character = 11, RULE_typed_identifier = 12, RULE_tuple = 13, RULE_tuple_type = 14, 
		RULE_list = 15, RULE_list_type = 16, RULE_map_element = 17, RULE_map = 18, 
		RULE_map_type = 19, RULE_block = 20, RULE_function_call = 21, RULE_function_declaration = 22, 
		RULE_variable_assignment = 23, RULE_operator_infix = 24, RULE_operator_prefix = 25, 
		RULE_expression_separator = 26, RULE_expression = 27, RULE_compilation_unit = 28;
	public static readonly string[] ruleNames = {
		"whitespace_any", "whitespace_sp", "whitespace_nl", "atom", "identifier", 
		"integer", "floating_point", "number_hex", "number_binary", "numerical", 
		"string", "character", "typed_identifier", "tuple", "tuple_type", "list", 
		"list_type", "map_element", "map", "map_type", "block", "function_call", 
		"function_declaration", "variable_assignment", "operator_infix", "operator_prefix", 
		"expression_separator", "expression", "compilation_unit"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "'('", "')'", "'['", "']'", "'{'", 
		"'}'", "'='", "','", "':'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SP", "NL", "COMMENT_SINGLE", "COMMENT_MULTI", "INTEGER", "FLOATING_POINT", 
		"NUMBER_HEX", "NUMBER_BINARY", "IDENTIFIER_SPECIAL", "IDENTIFIER", "IGNORE_IDENTIFIER", 
		"ATOM", "FUNCTION_NAME", "TYPE", "ESCAPED", "SPRING", "CHARACTER", "LPAREN", 
		"RPAREN", "LBRACKET", "RBRACKET", "LBRACE", "RBRACE", "ASSIGN", "SEPARATOR_COMMA", 
		"COLON", "SEMI_COLON", "OPERATOR_PREFIX", "OPERATOR_INFIX"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LentoParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static LentoParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LentoParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LentoParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Whitespace_anyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(LentoParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(LentoParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(LentoParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(LentoParser.SP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMENT_MULTI() { return GetTokens(LentoParser.COMMENT_MULTI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_MULTI(int i) {
			return GetToken(LentoParser.COMMENT_MULTI, i);
		}
		public Whitespace_anyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whitespace_any; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhitespace_any(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Whitespace_anyContext whitespace_any() {
		Whitespace_anyContext _localctx = new Whitespace_anyContext(Context, State);
		EnterRule(_localctx, 0, RULE_whitespace_any);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 58;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SP) | (1L << NL) | (1L << COMMENT_MULTI))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 61;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Whitespace_spContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SP() { return GetTokens(LentoParser.SP); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP(int i) {
			return GetToken(LentoParser.SP, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMENT_MULTI() { return GetTokens(LentoParser.COMMENT_MULTI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_MULTI(int i) {
			return GetToken(LentoParser.COMMENT_MULTI, i);
		}
		public Whitespace_spContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whitespace_sp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhitespace_sp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Whitespace_spContext whitespace_sp() {
		Whitespace_spContext _localctx = new Whitespace_spContext(Context, State);
		EnterRule(_localctx, 2, RULE_whitespace_sp);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 63;
					_la = TokenStream.LA(1);
					if ( !(_la==SP || _la==COMMENT_MULTI) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 66;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Whitespace_nlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(LentoParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(LentoParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMENT_MULTI() { return GetTokens(LentoParser.COMMENT_MULTI); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_MULTI(int i) {
			return GetToken(LentoParser.COMMENT_MULTI, i);
		}
		public Whitespace_nlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whitespace_nl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhitespace_nl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Whitespace_nlContext whitespace_nl() {
		Whitespace_nlContext _localctx = new Whitespace_nlContext(Context, State);
		EnterRule(_localctx, 4, RULE_whitespace_nl);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 68;
					_la = TokenStream.LA(1);
					if ( !(_la==NL || _la==COMMENT_MULTI) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 71;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATOM() { return GetToken(LentoParser.ATOM, 0); }
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 6, RULE_atom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			Match(ATOM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(LentoParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_IDENTIFIER() { return GetToken(LentoParser.IGNORE_IDENTIFIER, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 8, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			_la = TokenStream.LA(1);
			if ( !(_la==IDENTIFIER || _la==IGNORE_IDENTIFIER) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTEGER() { return GetToken(LentoParser.INTEGER, 0); }
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(Context, State);
		EnterRule(_localctx, 10, RULE_integer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			Match(INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Floating_pointContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOATING_POINT() { return GetToken(LentoParser.FLOATING_POINT, 0); }
		public Floating_pointContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floating_point; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloating_point(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Floating_pointContext floating_point() {
		Floating_pointContext _localctx = new Floating_pointContext(Context, State);
		EnterRule(_localctx, 12, RULE_floating_point);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			Match(FLOATING_POINT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Number_hexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_HEX() { return GetToken(LentoParser.NUMBER_HEX, 0); }
		public Number_hexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number_hex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber_hex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Number_hexContext number_hex() {
		Number_hexContext _localctx = new Number_hexContext(Context, State);
		EnterRule(_localctx, 14, RULE_number_hex);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			Match(NUMBER_HEX);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Number_binaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_BINARY() { return GetToken(LentoParser.NUMBER_BINARY, 0); }
		public Number_binaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number_binary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber_binary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Number_binaryContext number_binary() {
		Number_binaryContext _localctx = new Number_binaryContext(Context, State);
		EnterRule(_localctx, 16, RULE_number_binary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			Match(NUMBER_BINARY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Floating_pointContext floating_point() {
			return GetRuleContext<Floating_pointContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Number_hexContext number_hex() {
			return GetRuleContext<Number_hexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Number_binaryContext number_binary() {
			return GetRuleContext<Number_binaryContext>(0);
		}
		public NumericalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numerical; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumerical(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericalContext numerical() {
		NumericalContext _localctx = new NumericalContext(Context, State);
		EnterRule(_localctx, 18, RULE_numerical);
		try {
			State = 89;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 85;
				integer();
				}
				break;
			case FLOATING_POINT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 86;
				floating_point();
				}
				break;
			case NUMBER_HEX:
				EnterOuterAlt(_localctx, 3);
				{
				State = 87;
				number_hex();
				}
				break;
			case NUMBER_BINARY:
				EnterOuterAlt(_localctx, 4);
				{
				State = 88;
				number_binary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPRING() { return GetToken(LentoParser.SPRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 20, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			Match(SPRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharacterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARACTER() { return GetToken(LentoParser.CHARACTER, 0); }
		public CharacterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_character; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharacter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharacterContext character() {
		CharacterContext _localctx = new CharacterContext(Context, State);
		EnterRule(_localctx, 22, RULE_character);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			Match(CHARACTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Typed_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(LentoParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_spContext whitespace_sp() {
			return GetRuleContext<Whitespace_spContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Typed_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typed_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTyped_identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Typed_identifierContext typed_identifier() {
		Typed_identifierContext _localctx = new Typed_identifierContext(Context, State);
		EnterRule(_localctx, 24, RULE_typed_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			Match(TYPE);
			State = 96;
			whitespace_sp();
			State = 97;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LentoParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LentoParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_spContext[] whitespace_sp() {
			return GetRuleContexts<Whitespace_spContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_spContext whitespace_sp(int i) {
			return GetRuleContext<Whitespace_spContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEPARATOR_COMMA() { return GetTokens(LentoParser.SEPARATOR_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEPARATOR_COMMA(int i) {
			return GetToken(LentoParser.SEPARATOR_COMMA, i);
		}
		public TupleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuple(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleContext tuple() {
		TupleContext _localctx = new TupleContext(Context, State);
		EnterRule(_localctx, 26, RULE_tuple);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			Match(LPAREN);
			State = 101;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 100;
				whitespace_sp();
				}
				break;
			}
			State = 117;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 103;
				expression(0);
				State = 114;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 105;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==SP || _la==COMMENT_MULTI) {
							{
							State = 104;
							whitespace_sp();
							}
						}

						State = 107;
						Match(SEPARATOR_COMMA);
						State = 109;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
						case 1:
							{
							State = 108;
							whitespace_sp();
							}
							break;
						}
						State = 111;
						expression(0);
						}
						} 
					}
					State = 116;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				}
				}
				break;
			}
			State = 120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SP || _la==COMMENT_MULTI) {
				{
				State = 119;
				whitespace_sp();
				}
			}

			State = 122;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tuple_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LentoParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LentoParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_spContext[] whitespace_sp() {
			return GetRuleContexts<Whitespace_spContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_spContext whitespace_sp(int i) {
			return GetRuleContext<Whitespace_spContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Typed_identifierContext[] typed_identifier() {
			return GetRuleContexts<Typed_identifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Typed_identifierContext typed_identifier(int i) {
			return GetRuleContext<Typed_identifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEPARATOR_COMMA() { return GetTokens(LentoParser.SEPARATOR_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEPARATOR_COMMA(int i) {
			return GetToken(LentoParser.SEPARATOR_COMMA, i);
		}
		public Tuple_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tuple_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTuple_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tuple_typeContext tuple_type() {
		Tuple_typeContext _localctx = new Tuple_typeContext(Context, State);
		EnterRule(_localctx, 28, RULE_tuple_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			Match(LPAREN);
			State = 126;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 125;
				whitespace_sp();
				}
				break;
			}
			State = 145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TYPE) {
				{
				State = 128;
				typed_identifier();
				State = 130;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 129;
					whitespace_sp();
					}
					break;
				}
				State = 142;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SEPARATOR_COMMA) {
					{
					{
					State = 132;
					Match(SEPARATOR_COMMA);
					State = 134;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==SP || _la==COMMENT_MULTI) {
						{
						State = 133;
						whitespace_sp();
						}
					}

					State = 136;
					typed_identifier();
					State = 138;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
					case 1:
						{
						State = 137;
						whitespace_sp();
						}
						break;
					}
					}
					}
					State = 144;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SP || _la==COMMENT_MULTI) {
				{
				State = 147;
				whitespace_sp();
				}
			}

			State = 150;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(LentoParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(LentoParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEPARATOR_COMMA() { return GetTokens(LentoParser.SEPARATOR_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEPARATOR_COMMA(int i) {
			return GetToken(LentoParser.SEPARATOR_COMMA, i);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 30, RULE_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			Match(LBRACKET);
			State = 161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SP) | (1L << NL) | (1L << COMMENT_MULTI) | (1L << INTEGER) | (1L << FLOATING_POINT) | (1L << NUMBER_HEX) | (1L << NUMBER_BINARY) | (1L << IDENTIFIER) | (1L << IGNORE_IDENTIFIER) | (1L << ATOM) | (1L << FUNCTION_NAME) | (1L << TYPE) | (1L << SPRING) | (1L << CHARACTER) | (1L << LPAREN) | (1L << LBRACKET) | (1L << LBRACE) | (1L << OPERATOR_PREFIX))) != 0)) {
				{
				State = 153;
				expression(0);
				State = 158;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SEPARATOR_COMMA) {
					{
					{
					State = 154;
					Match(SEPARATOR_COMMA);
					State = 155;
					expression(0);
					}
					}
					State = 160;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 163;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class List_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(LentoParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(LentoParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_spContext[] whitespace_sp() {
			return GetRuleContexts<Whitespace_spContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_spContext whitespace_sp(int i) {
			return GetRuleContext<Whitespace_spContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TYPE() { return GetTokens(LentoParser.TYPE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE(int i) {
			return GetToken(LentoParser.TYPE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEPARATOR_COMMA() { return GetTokens(LentoParser.SEPARATOR_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEPARATOR_COMMA(int i) {
			return GetToken(LentoParser.SEPARATOR_COMMA, i);
		}
		public List_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public List_typeContext list_type() {
		List_typeContext _localctx = new List_typeContext(Context, State);
		EnterRule(_localctx, 32, RULE_list_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			Match(LBRACKET);
			State = 167;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 166;
				whitespace_sp();
				}
				break;
			}
			State = 186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TYPE) {
				{
				State = 169;
				Match(TYPE);
				State = 171;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
				case 1:
					{
					State = 170;
					whitespace_sp();
					}
					break;
				}
				State = 183;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SEPARATOR_COMMA) {
					{
					{
					State = 173;
					Match(SEPARATOR_COMMA);
					State = 175;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==SP || _la==COMMENT_MULTI) {
						{
						State = 174;
						whitespace_sp();
						}
					}

					State = 177;
					Match(TYPE);
					State = 179;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
					case 1:
						{
						State = 178;
						whitespace_sp();
						}
						break;
					}
					}
					}
					State = 185;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SP || _la==COMMENT_MULTI) {
				{
				State = 188;
				whitespace_sp();
				}
			}

			State = 191;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Map_elementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(LentoParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Map_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_map_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMap_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Map_elementContext map_element() {
		Map_elementContext _localctx = new Map_elementContext(Context, State);
		EnterRule(_localctx, 34, RULE_map_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			identifier();
			State = 194;
			Match(COLON);
			State = 195;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MapContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LentoParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Map_elementContext[] map_element() {
			return GetRuleContexts<Map_elementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Map_elementContext map_element(int i) {
			return GetRuleContext<Map_elementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LentoParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_spContext[] whitespace_sp() {
			return GetRuleContexts<Whitespace_spContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_spContext whitespace_sp(int i) {
			return GetRuleContext<Whitespace_spContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEPARATOR_COMMA() { return GetTokens(LentoParser.SEPARATOR_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEPARATOR_COMMA(int i) {
			return GetToken(LentoParser.SEPARATOR_COMMA, i);
		}
		public MapContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_map; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMap(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MapContext map() {
		MapContext _localctx = new MapContext(Context, State);
		EnterRule(_localctx, 36, RULE_map);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			Match(LPAREN);
			State = 199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SP || _la==COMMENT_MULTI) {
				{
				State = 198;
				whitespace_sp();
				}
			}

			State = 201;
			map_element();
			State = 206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEPARATOR_COMMA) {
				{
				{
				State = 202;
				Match(SEPARATOR_COMMA);
				State = 203;
				map_element();
				}
				}
				State = 208;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SP || _la==COMMENT_MULTI) {
				{
				State = 209;
				whitespace_sp();
				}
			}

			State = 212;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Map_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(LentoParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Typed_identifierContext[] typed_identifier() {
			return GetRuleContexts<Typed_identifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Typed_identifierContext typed_identifier(int i) {
			return GetRuleContext<Typed_identifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(LentoParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_spContext[] whitespace_sp() {
			return GetRuleContexts<Whitespace_spContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_spContext whitespace_sp(int i) {
			return GetRuleContext<Whitespace_spContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEPARATOR_COMMA() { return GetTokens(LentoParser.SEPARATOR_COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEPARATOR_COMMA(int i) {
			return GetToken(LentoParser.SEPARATOR_COMMA, i);
		}
		public Map_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_map_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMap_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Map_typeContext map_type() {
		Map_typeContext _localctx = new Map_typeContext(Context, State);
		EnterRule(_localctx, 38, RULE_map_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			Match(LPAREN);
			State = 216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SP || _la==COMMENT_MULTI) {
				{
				State = 215;
				whitespace_sp();
				}
			}

			State = 218;
			typed_identifier();
			State = 223;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEPARATOR_COMMA) {
				{
				{
				State = 219;
				Match(SEPARATOR_COMMA);
				State = 220;
				typed_identifier();
				}
				}
				State = 225;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SP || _la==COMMENT_MULTI) {
				{
				State = 226;
				whitespace_sp();
				}
			}

			State = 229;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACE() { return GetToken(LentoParser.LBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACE() { return GetToken(LentoParser.RBRACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_separatorContext[] expression_separator() {
			return GetRuleContexts<Expression_separatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_separatorContext expression_separator(int i) {
			return GetRuleContext<Expression_separatorContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 40, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			Match(LBRACE);
			State = 241;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 232;
				expression(0);
				}
				break;
			case 2:
				{
				State = 238;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SP) | (1L << NL) | (1L << COMMENT_MULTI) | (1L << INTEGER) | (1L << FLOATING_POINT) | (1L << NUMBER_HEX) | (1L << NUMBER_BINARY) | (1L << IDENTIFIER) | (1L << IGNORE_IDENTIFIER) | (1L << ATOM) | (1L << FUNCTION_NAME) | (1L << TYPE) | (1L << SPRING) | (1L << CHARACTER) | (1L << LPAREN) | (1L << LBRACKET) | (1L << LBRACE) | (1L << OPERATOR_PREFIX))) != 0)) {
					{
					{
					State = 233;
					expression(0);
					State = 234;
					expression_separator();
					}
					}
					State = 240;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 243;
			Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION_NAME() { return GetToken(LentoParser.FUNCTION_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_separatorContext expression_separator() {
			return GetRuleContext<Expression_separatorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_spContext[] whitespace_sp() {
			return GetRuleContexts<Whitespace_spContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_spContext whitespace_sp(int i) {
			return GetRuleContext<Whitespace_spContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 42, RULE_function_call);
		try {
			int _alt;
			State = 257;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 245;
				Match(FUNCTION_NAME);
				State = 246;
				tuple();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 247;
				Match(FUNCTION_NAME);
				State = 251;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 248;
						whitespace_sp();
						State = 249;
						expression(0);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 253;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 255;
				expression_separator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(LentoParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_spContext[] whitespace_sp() {
			return GetRuleContexts<Whitespace_spContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_spContext whitespace_sp(int i) {
			return GetRuleContext<Whitespace_spContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION_NAME() { return GetToken(LentoParser.FUNCTION_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Tuple_typeContext tuple_type() {
			return GetRuleContext<Tuple_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(LentoParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Function_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_declarationContext function_declaration() {
		Function_declarationContext _localctx = new Function_declarationContext(Context, State);
		EnterRule(_localctx, 44, RULE_function_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 259;
			Match(TYPE);
			State = 260;
			whitespace_sp();
			State = 261;
			Match(FUNCTION_NAME);
			State = 262;
			tuple_type();
			State = 264;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SP || _la==COMMENT_MULTI) {
				{
				State = 263;
				whitespace_sp();
				}
			}

			State = 269;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASSIGN:
				{
				State = 266;
				Match(ASSIGN);
				State = 267;
				expression(0);
				}
				break;
			case LBRACE:
				{
				State = 268;
				block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_assignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(LentoParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_spContext whitespace_sp() {
			return GetRuleContext<Whitespace_spContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(LentoParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Variable_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_assignmentContext variable_assignment() {
		Variable_assignmentContext _localctx = new Variable_assignmentContext(Context, State);
		EnterRule(_localctx, 46, RULE_variable_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			Match(TYPE);
			State = 272;
			whitespace_sp();
			State = 273;
			identifier();
			State = 274;
			Match(ASSIGN);
			State = 277;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				{
				State = 275;
				expression(0);
				}
				break;
			case 2:
				{
				State = 276;
				block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_infixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_INFIX() { return GetToken(LentoParser.OPERATOR_INFIX, 0); }
		public Operator_infixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_infix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_infix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_infixContext operator_infix() {
		Operator_infixContext _localctx = new Operator_infixContext(Context, State);
		EnterRule(_localctx, 48, RULE_operator_infix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			Match(OPERATOR_INFIX);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_prefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR_PREFIX() { return GetToken(LentoParser.OPERATOR_PREFIX, 0); }
		public Operator_prefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_prefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_prefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_prefixContext operator_prefix() {
		Operator_prefixContext _localctx = new Operator_prefixContext(Context, State);
		EnterRule(_localctx, 50, RULE_operator_prefix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			Match(OPERATOR_PREFIX);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_separatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_nlContext whitespace_nl() {
			return GetRuleContext<Whitespace_nlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMI_COLON() { return GetToken(LentoParser.SEMI_COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_spContext whitespace_sp() {
			return GetRuleContext<Whitespace_spContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_anyContext whitespace_any() {
			return GetRuleContext<Whitespace_anyContext>(0);
		}
		public Expression_separatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_separator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_separator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_separatorContext expression_separator() {
		Expression_separatorContext _localctx = new Expression_separatorContext(Context, State);
		EnterRule(_localctx, 52, RULE_expression_separator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				{
				State = 283;
				whitespace_sp();
				}
				break;
			}
			State = 288;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NL:
			case COMMENT_MULTI:
				{
				State = 286;
				whitespace_nl();
				}
				break;
			case SEMI_COLON:
				{
				State = 287;
				Match(SEMI_COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 291;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				{
				State = 290;
				whitespace_any();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_anyContext whitespace_any() {
			return GetRuleContext<Whitespace_anyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Operator_prefixContext operator_prefix() {
			return GetRuleContext<Operator_prefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_declarationContext function_declaration() {
			return GetRuleContext<Function_declarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_assignmentContext variable_assignment() {
			return GetRuleContext<Variable_assignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericalContext numerical() {
			return GetRuleContext<NumericalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharacterContext character() {
			return GetRuleContext<CharacterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleContext tuple() {
			return GetRuleContext<TupleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MapContext map() {
			return GetRuleContext<MapContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Operator_infixContext operator_infix() {
			return GetRuleContext<Operator_infixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Whitespace_spContext whitespace_sp() {
			return GetRuleContext<Whitespace_spContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 54;
		EnterRecursionRule(_localctx, 54, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				{
				State = 294;
				whitespace_any();
				State = 295;
				expression(16);
				}
				break;
			case 2:
				{
				State = 297;
				operator_prefix();
				State = 298;
				expression(13);
				}
				break;
			case 3:
				{
				State = 300;
				function_declaration();
				}
				break;
			case 4:
				{
				State = 301;
				variable_assignment();
				}
				break;
			case 5:
				{
				State = 302;
				function_call();
				}
				break;
			case 6:
				{
				State = 303;
				identifier();
				}
				break;
			case 7:
				{
				State = 304;
				numerical();
				}
				break;
			case 8:
				{
				State = 305;
				character();
				}
				break;
			case 9:
				{
				State = 306;
				@string();
				}
				break;
			case 10:
				{
				State = 307;
				tuple();
				}
				break;
			case 11:
				{
				State = 308;
				list();
				}
				break;
			case 12:
				{
				State = 309;
				map();
				}
				break;
			case 13:
				{
				State = 310;
				atom();
				}
				break;
			case 14:
				{
				State = 311;
				block();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 322;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 320;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 314;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 315;
						operator_infix();
						State = 316;
						expression(15);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 318;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 319;
						whitespace_sp();
						}
						break;
					}
					} 
				}
				State = 324;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Compilation_unitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(LentoParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression_separatorContext[] expression_separator() {
			return GetRuleContexts<Expression_separatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_separatorContext expression_separator(int i) {
			return GetRuleContext<Expression_separatorContext>(i);
		}
		public Compilation_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilation_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILentoParserVisitor<TResult> typedVisitor = visitor as ILentoParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilation_unit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compilation_unitContext compilation_unit() {
		Compilation_unitContext _localctx = new Compilation_unitContext(Context, State);
		EnterRule(_localctx, 56, RULE_compilation_unit);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 325;
			expression(0);
			State = 331;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 326;
					expression_separator();
					State = 327;
					expression(0);
					}
					} 
				}
				State = 333;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			}
			State = 335;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SP) | (1L << NL) | (1L << COMMENT_MULTI) | (1L << SEMI_COLON))) != 0)) {
				{
				State = 334;
				expression_separator();
				}
			}

			State = 337;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 27: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 14);
		case 1: return Precpred(Context, 15);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1F', '\x156', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x3', '\x2', '\x6', '\x2', '>', 
		'\n', '\x2', '\r', '\x2', '\xE', '\x2', '?', '\x3', '\x3', '\x6', '\x3', 
		'\x43', '\n', '\x3', '\r', '\x3', '\xE', '\x3', '\x44', '\x3', '\x4', 
		'\x6', '\x4', 'H', '\n', '\x4', '\r', '\x4', '\xE', '\x4', 'I', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', 
		'\\', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x5', '\xF', 'h', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x5', '\xF', 'l', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', 
		'p', '\n', '\xF', '\x3', '\xF', '\a', '\xF', 's', '\n', '\xF', '\f', '\xF', 
		'\xE', '\xF', 'v', '\v', '\xF', '\x5', '\xF', 'x', '\n', '\xF', '\x3', 
		'\xF', '\x5', '\xF', '{', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\x10', '\x3', '\x10', '\x5', '\x10', '\x81', '\n', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x5', '\x10', '\x85', '\n', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x5', '\x10', '\x89', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x5', '\x10', '\x8D', '\n', '\x10', '\a', '\x10', '\x8F', '\n', '\x10', 
		'\f', '\x10', '\xE', '\x10', '\x92', '\v', '\x10', '\x5', '\x10', '\x94', 
		'\n', '\x10', '\x3', '\x10', '\x5', '\x10', '\x97', '\n', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\a', '\x11', '\x9F', '\n', '\x11', '\f', '\x11', '\xE', '\x11', 
		'\xA2', '\v', '\x11', '\x5', '\x11', '\xA4', '\n', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\xAA', '\n', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\xAE', '\n', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\xB2', '\n', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x5', '\x12', '\xB6', '\n', '\x12', '\a', '\x12', 
		'\xB8', '\n', '\x12', '\f', '\x12', '\xE', '\x12', '\xBB', '\v', '\x12', 
		'\x5', '\x12', '\xBD', '\n', '\x12', '\x3', '\x12', '\x5', '\x12', '\xC0', 
		'\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', 
		'\xCA', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\a', 
		'\x14', '\xCF', '\n', '\x14', '\f', '\x14', '\xE', '\x14', '\xD2', '\v', 
		'\x14', '\x3', '\x14', '\x5', '\x14', '\xD5', '\n', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\xDB', '\n', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\a', '\x15', '\xE0', 
		'\n', '\x15', '\f', '\x15', '\xE', '\x15', '\xE3', '\v', '\x15', '\x3', 
		'\x15', '\x5', '\x15', '\xE6', '\n', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\a', '\x16', '\xEF', '\n', '\x16', '\f', '\x16', '\xE', '\x16', '\xF2', 
		'\v', '\x16', '\x5', '\x16', '\xF4', '\n', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x6', '\x17', '\xFE', '\n', '\x17', '\r', '\x17', 
		'\xE', '\x17', '\xFF', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x104', 
		'\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x5', '\x18', '\x10B', '\n', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x5', '\x18', '\x110', '\n', '\x18', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x5', '\x19', '\x118', '\n', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x5', '\x1C', '\x11F', '\n', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x123', '\n', '\x1C', '\x3', 
		'\x1C', '\x5', '\x1C', '\x126', '\n', '\x1C', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x13B', '\n', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\a', '\x1D', '\x143', '\n', '\x1D', '\f', '\x1D', '\xE', '\x1D', 
		'\x146', '\v', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\a', '\x1E', '\x14C', '\n', '\x1E', '\f', '\x1E', '\xE', '\x1E', 
		'\x14F', '\v', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x152', '\n', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x2', '\x3', '\x38', '\x1F', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '\x2', '\x6', '\x4', 
		'\x2', '\x3', '\x4', '\x6', '\x6', '\x4', '\x2', '\x3', '\x3', '\x6', 
		'\x6', '\x4', '\x2', '\x4', '\x4', '\x6', '\x6', '\x3', '\x2', '\f', '\r', 
		'\x2', '\x175', '\x2', '=', '\x3', '\x2', '\x2', '\x2', '\x4', '\x42', 
		'\x3', '\x2', '\x2', '\x2', '\x6', 'G', '\x3', '\x2', '\x2', '\x2', '\b', 
		'K', '\x3', '\x2', '\x2', '\x2', '\n', 'M', '\x3', '\x2', '\x2', '\x2', 
		'\f', 'O', '\x3', '\x2', '\x2', '\x2', '\xE', 'Q', '\x3', '\x2', '\x2', 
		'\x2', '\x10', 'S', '\x3', '\x2', '\x2', '\x2', '\x12', 'U', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '[', '\x3', '\x2', '\x2', '\x2', '\x16', ']', '\x3', 
		'\x2', '\x2', '\x2', '\x18', '_', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\x61', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x65', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '~', '\x3', '\x2', '\x2', '\x2', ' ', '\x9A', '\x3', '\x2', 
		'\x2', '\x2', '\"', '\xA7', '\x3', '\x2', '\x2', '\x2', '$', '\xC3', '\x3', 
		'\x2', '\x2', '\x2', '&', '\xC7', '\x3', '\x2', '\x2', '\x2', '(', '\xD8', 
		'\x3', '\x2', '\x2', '\x2', '*', '\xE9', '\x3', '\x2', '\x2', '\x2', ',', 
		'\x103', '\x3', '\x2', '\x2', '\x2', '.', '\x105', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '\x111', '\x3', '\x2', '\x2', '\x2', '\x32', '\x119', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\x11E', '\x3', '\x2', '\x2', '\x2', '\x38', '\x13A', '\x3', '\x2', '\x2', 
		'\x2', ':', '\x147', '\x3', '\x2', '\x2', '\x2', '<', '>', '\t', '\x2', 
		'\x2', '\x2', '=', '<', '\x3', '\x2', '\x2', '\x2', '>', '?', '\x3', '\x2', 
		'\x2', '\x2', '?', '=', '\x3', '\x2', '\x2', '\x2', '?', '@', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x3', '\x3', '\x2', '\x2', '\x2', '\x41', '\x43', 
		'\t', '\x3', '\x2', '\x2', '\x42', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '\x44', '\x3', '\x2', '\x2', '\x2', '\x44', '\x42', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\x45', '\x3', '\x2', '\x2', '\x2', '\x45', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\x46', 'H', '\t', '\x4', '\x2', '\x2', 'G', 
		'\x46', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\x3', '\x2', '\x2', '\x2', 
		'I', 'G', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\x3', '\x2', '\x2', '\x2', 
		'J', '\a', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\a', '\xE', '\x2', '\x2', 
		'L', '\t', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\t', '\x5', '\x2', '\x2', 
		'N', '\v', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\a', '\a', '\x2', '\x2', 
		'P', '\r', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\a', '\b', '\x2', '\x2', 
		'R', '\xF', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\a', '\t', '\x2', '\x2', 
		'T', '\x11', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\a', '\n', '\x2', 
		'\x2', 'V', '\x13', '\x3', '\x2', '\x2', '\x2', 'W', '\\', '\x5', '\f', 
		'\a', '\x2', 'X', '\\', '\x5', '\xE', '\b', '\x2', 'Y', '\\', '\x5', '\x10', 
		'\t', '\x2', 'Z', '\\', '\x5', '\x12', '\n', '\x2', '[', 'W', '\x3', '\x2', 
		'\x2', '\x2', '[', 'X', '\x3', '\x2', '\x2', '\x2', '[', 'Y', '\x3', '\x2', 
		'\x2', '\x2', '[', 'Z', '\x3', '\x2', '\x2', '\x2', '\\', '\x15', '\x3', 
		'\x2', '\x2', '\x2', ']', '^', '\a', '\x12', '\x2', '\x2', '^', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '_', '`', '\a', '\x13', '\x2', '\x2', '`', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\a', '\x10', '\x2', 
		'\x2', '\x62', '\x63', '\x5', '\x4', '\x3', '\x2', '\x63', '\x64', '\x5', 
		'\n', '\x6', '\x2', '\x64', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x65', 
		'g', '\a', '\x14', '\x2', '\x2', '\x66', 'h', '\x5', '\x4', '\x3', '\x2', 
		'g', '\x66', '\x3', '\x2', '\x2', '\x2', 'g', 'h', '\x3', '\x2', '\x2', 
		'\x2', 'h', 'w', '\x3', '\x2', '\x2', '\x2', 'i', 't', '\x5', '\x38', 
		'\x1D', '\x2', 'j', 'l', '\x5', '\x4', '\x3', '\x2', 'k', 'j', '\x3', 
		'\x2', '\x2', '\x2', 'k', 'l', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\x3', 
		'\x2', '\x2', '\x2', 'm', 'o', '\a', '\x1B', '\x2', '\x2', 'n', 'p', '\x5', 
		'\x4', '\x3', '\x2', 'o', 'n', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\x3', 
		'\x2', '\x2', '\x2', 'p', 'q', '\x3', '\x2', '\x2', '\x2', 'q', 's', '\x5', 
		'\x38', '\x1D', '\x2', 'r', 'k', '\x3', '\x2', '\x2', '\x2', 's', 'v', 
		'\x3', '\x2', '\x2', '\x2', 't', 'r', '\x3', '\x2', '\x2', '\x2', 't', 
		'u', '\x3', '\x2', '\x2', '\x2', 'u', 'x', '\x3', '\x2', '\x2', '\x2', 
		'v', 't', '\x3', '\x2', '\x2', '\x2', 'w', 'i', '\x3', '\x2', '\x2', '\x2', 
		'w', 'x', '\x3', '\x2', '\x2', '\x2', 'x', 'z', '\x3', '\x2', '\x2', '\x2', 
		'y', '{', '\x5', '\x4', '\x3', '\x2', 'z', 'y', '\x3', '\x2', '\x2', '\x2', 
		'z', '{', '\x3', '\x2', '\x2', '\x2', '{', '|', '\x3', '\x2', '\x2', '\x2', 
		'|', '}', '\a', '\x15', '\x2', '\x2', '}', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '~', '\x80', '\a', '\x14', '\x2', '\x2', '\x7F', '\x81', '\x5', 
		'\x4', '\x3', '\x2', '\x80', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x80', 
		'\x81', '\x3', '\x2', '\x2', '\x2', '\x81', '\x93', '\x3', '\x2', '\x2', 
		'\x2', '\x82', '\x84', '\x5', '\x1A', '\xE', '\x2', '\x83', '\x85', '\x5', 
		'\x4', '\x3', '\x2', '\x84', '\x83', '\x3', '\x2', '\x2', '\x2', '\x84', 
		'\x85', '\x3', '\x2', '\x2', '\x2', '\x85', '\x90', '\x3', '\x2', '\x2', 
		'\x2', '\x86', '\x88', '\a', '\x1B', '\x2', '\x2', '\x87', '\x89', '\x5', 
		'\x4', '\x3', '\x2', '\x88', '\x87', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'\x89', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8A', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '\x8C', '\x5', '\x1A', '\xE', '\x2', '\x8B', '\x8D', '\x5', 
		'\x4', '\x3', '\x2', '\x8C', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8C', 
		'\x8D', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8F', '\x3', '\x2', '\x2', 
		'\x2', '\x8E', '\x86', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x92', '\x3', 
		'\x2', '\x2', '\x2', '\x90', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x90', 
		'\x91', '\x3', '\x2', '\x2', '\x2', '\x91', '\x94', '\x3', '\x2', '\x2', 
		'\x2', '\x92', '\x90', '\x3', '\x2', '\x2', '\x2', '\x93', '\x82', '\x3', 
		'\x2', '\x2', '\x2', '\x93', '\x94', '\x3', '\x2', '\x2', '\x2', '\x94', 
		'\x96', '\x3', '\x2', '\x2', '\x2', '\x95', '\x97', '\x5', '\x4', '\x3', 
		'\x2', '\x96', '\x95', '\x3', '\x2', '\x2', '\x2', '\x96', '\x97', '\x3', 
		'\x2', '\x2', '\x2', '\x97', '\x98', '\x3', '\x2', '\x2', '\x2', '\x98', 
		'\x99', '\a', '\x15', '\x2', '\x2', '\x99', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\x9A', '\xA3', '\a', '\x16', '\x2', '\x2', '\x9B', '\xA0', '\x5', 
		'\x38', '\x1D', '\x2', '\x9C', '\x9D', '\a', '\x1B', '\x2', '\x2', '\x9D', 
		'\x9F', '\x5', '\x38', '\x1D', '\x2', '\x9E', '\x9C', '\x3', '\x2', '\x2', 
		'\x2', '\x9F', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x9E', '\x3', 
		'\x2', '\x2', '\x2', '\xA0', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA1', 
		'\xA4', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA0', '\x3', '\x2', '\x2', 
		'\x2', '\xA3', '\x9B', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', '\x3', 
		'\x2', '\x2', '\x2', '\xA4', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA5', 
		'\xA6', '\a', '\x17', '\x2', '\x2', '\xA6', '!', '\x3', '\x2', '\x2', 
		'\x2', '\xA7', '\xA9', '\a', '\x16', '\x2', '\x2', '\xA8', '\xAA', '\x5', 
		'\x4', '\x3', '\x2', '\xA9', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xA9', 
		'\xAA', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xBC', '\x3', '\x2', '\x2', 
		'\x2', '\xAB', '\xAD', '\a', '\x10', '\x2', '\x2', '\xAC', '\xAE', '\x5', 
		'\x4', '\x3', '\x2', '\xAD', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAD', 
		'\xAE', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xB9', '\x3', '\x2', '\x2', 
		'\x2', '\xAF', '\xB1', '\a', '\x1B', '\x2', '\x2', '\xB0', '\xB2', '\x5', 
		'\x4', '\x3', '\x2', '\xB1', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB1', 
		'\xB2', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB3', '\x3', '\x2', '\x2', 
		'\x2', '\xB3', '\xB5', '\a', '\x10', '\x2', '\x2', '\xB4', '\xB6', '\x5', 
		'\x4', '\x3', '\x2', '\xB5', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB5', 
		'\xB6', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB8', '\x3', '\x2', '\x2', 
		'\x2', '\xB7', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xBB', '\x3', 
		'\x2', '\x2', '\x2', '\xB9', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB9', 
		'\xBA', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xBD', '\x3', '\x2', '\x2', 
		'\x2', '\xBB', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xAB', '\x3', 
		'\x2', '\x2', '\x2', '\xBC', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBD', 
		'\xBF', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xC0', '\x5', '\x4', '\x3', 
		'\x2', '\xBF', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xC0', '\x3', 
		'\x2', '\x2', '\x2', '\xC0', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC1', 
		'\xC2', '\a', '\x17', '\x2', '\x2', '\xC2', '#', '\x3', '\x2', '\x2', 
		'\x2', '\xC3', '\xC4', '\x5', '\n', '\x6', '\x2', '\xC4', '\xC5', '\a', 
		'\x1C', '\x2', '\x2', '\xC5', '\xC6', '\x5', '\x38', '\x1D', '\x2', '\xC6', 
		'%', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC9', '\a', '\x14', '\x2', 
		'\x2', '\xC8', '\xCA', '\x5', '\x4', '\x3', '\x2', '\xC9', '\xC8', '\x3', 
		'\x2', '\x2', '\x2', '\xC9', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xCA', 
		'\xCB', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xD0', '\x5', '$', '\x13', 
		'\x2', '\xCC', '\xCD', '\a', '\x1B', '\x2', '\x2', '\xCD', '\xCF', '\x5', 
		'$', '\x13', '\x2', '\xCE', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCF', 
		'\xD2', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xCE', '\x3', '\x2', '\x2', 
		'\x2', '\xD0', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD4', '\x3', 
		'\x2', '\x2', '\x2', '\xD2', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD3', 
		'\xD5', '\x5', '\x4', '\x3', '\x2', '\xD4', '\xD3', '\x3', '\x2', '\x2', 
		'\x2', '\xD4', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\x3', 
		'\x2', '\x2', '\x2', '\xD6', '\xD7', '\a', '\x15', '\x2', '\x2', '\xD7', 
		'\'', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xDA', '\a', '\x14', '\x2', 
		'\x2', '\xD9', '\xDB', '\x5', '\x4', '\x3', '\x2', '\xDA', '\xD9', '\x3', 
		'\x2', '\x2', '\x2', '\xDA', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDB', 
		'\xDC', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xE1', '\x5', '\x1A', '\xE', 
		'\x2', '\xDD', '\xDE', '\a', '\x1B', '\x2', '\x2', '\xDE', '\xE0', '\x5', 
		'\x1A', '\xE', '\x2', '\xDF', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xE0', 
		'\xE3', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xDF', '\x3', '\x2', '\x2', 
		'\x2', '\xE1', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE5', '\x3', 
		'\x2', '\x2', '\x2', '\xE3', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xE4', 
		'\xE6', '\x5', '\x4', '\x3', '\x2', '\xE5', '\xE4', '\x3', '\x2', '\x2', 
		'\x2', '\xE5', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', '\x3', 
		'\x2', '\x2', '\x2', '\xE7', '\xE8', '\a', '\x15', '\x2', '\x2', '\xE8', 
		')', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xF3', '\a', '\x18', '\x2', 
		'\x2', '\xEA', '\xF4', '\x5', '\x38', '\x1D', '\x2', '\xEB', '\xEC', '\x5', 
		'\x38', '\x1D', '\x2', '\xEC', '\xED', '\x5', '\x36', '\x1C', '\x2', '\xED', 
		'\xEF', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEB', '\x3', '\x2', '\x2', 
		'\x2', '\xEF', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xEE', '\x3', 
		'\x2', '\x2', '\x2', '\xF0', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF1', 
		'\xF4', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF0', '\x3', '\x2', '\x2', 
		'\x2', '\xF3', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF0', '\x3', 
		'\x2', '\x2', '\x2', '\xF4', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF5', 
		'\xF6', '\a', '\x19', '\x2', '\x2', '\xF6', '+', '\x3', '\x2', '\x2', 
		'\x2', '\xF7', '\xF8', '\a', '\xF', '\x2', '\x2', '\xF8', '\x104', '\x5', 
		'\x1C', '\xF', '\x2', '\xF9', '\xFD', '\a', '\xF', '\x2', '\x2', '\xFA', 
		'\xFB', '\x5', '\x4', '\x3', '\x2', '\xFB', '\xFC', '\x5', '\x38', '\x1D', 
		'\x2', '\xFC', '\xFE', '\x3', '\x2', '\x2', '\x2', '\xFD', '\xFA', '\x3', 
		'\x2', '\x2', '\x2', '\xFE', '\xFF', '\x3', '\x2', '\x2', '\x2', '\xFF', 
		'\xFD', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x100', '\x3', '\x2', '\x2', 
		'\x2', '\x100', '\x101', '\x3', '\x2', '\x2', '\x2', '\x101', '\x102', 
		'\x5', '\x36', '\x1C', '\x2', '\x102', '\x104', '\x3', '\x2', '\x2', '\x2', 
		'\x103', '\xF7', '\x3', '\x2', '\x2', '\x2', '\x103', '\xF9', '\x3', '\x2', 
		'\x2', '\x2', '\x104', '-', '\x3', '\x2', '\x2', '\x2', '\x105', '\x106', 
		'\a', '\x10', '\x2', '\x2', '\x106', '\x107', '\x5', '\x4', '\x3', '\x2', 
		'\x107', '\x108', '\a', '\xF', '\x2', '\x2', '\x108', '\x10A', '\x5', 
		'\x1E', '\x10', '\x2', '\x109', '\x10B', '\x5', '\x4', '\x3', '\x2', '\x10A', 
		'\x109', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x10B', '\x3', '\x2', '\x2', 
		'\x2', '\x10B', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x10D', 
		'\a', '\x1A', '\x2', '\x2', '\x10D', '\x110', '\x5', '\x38', '\x1D', '\x2', 
		'\x10E', '\x110', '\x5', '*', '\x16', '\x2', '\x10F', '\x10C', '\x3', 
		'\x2', '\x2', '\x2', '\x10F', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x110', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x111', '\x112', '\a', '\x10', '\x2', 
		'\x2', '\x112', '\x113', '\x5', '\x4', '\x3', '\x2', '\x113', '\x114', 
		'\x5', '\n', '\x6', '\x2', '\x114', '\x117', '\a', '\x1A', '\x2', '\x2', 
		'\x115', '\x118', '\x5', '\x38', '\x1D', '\x2', '\x116', '\x118', '\x5', 
		'*', '\x16', '\x2', '\x117', '\x115', '\x3', '\x2', '\x2', '\x2', '\x117', 
		'\x116', '\x3', '\x2', '\x2', '\x2', '\x118', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x119', '\x11A', '\a', '\x1F', '\x2', '\x2', '\x11A', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x11B', '\x11C', '\a', '\x1E', '\x2', '\x2', 
		'\x11C', '\x35', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x11F', '\x5', 
		'\x4', '\x3', '\x2', '\x11E', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x11E', 
		'\x11F', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x122', '\x3', '\x2', '\x2', 
		'\x2', '\x120', '\x123', '\x5', '\x6', '\x4', '\x2', '\x121', '\x123', 
		'\a', '\x1D', '\x2', '\x2', '\x122', '\x120', '\x3', '\x2', '\x2', '\x2', 
		'\x122', '\x121', '\x3', '\x2', '\x2', '\x2', '\x123', '\x125', '\x3', 
		'\x2', '\x2', '\x2', '\x124', '\x126', '\x5', '\x2', '\x2', '\x2', '\x125', 
		'\x124', '\x3', '\x2', '\x2', '\x2', '\x125', '\x126', '\x3', '\x2', '\x2', 
		'\x2', '\x126', '\x37', '\x3', '\x2', '\x2', '\x2', '\x127', '\x128', 
		'\b', '\x1D', '\x1', '\x2', '\x128', '\x129', '\x5', '\x2', '\x2', '\x2', 
		'\x129', '\x12A', '\x5', '\x38', '\x1D', '\x12', '\x12A', '\x13B', '\x3', 
		'\x2', '\x2', '\x2', '\x12B', '\x12C', '\x5', '\x34', '\x1B', '\x2', '\x12C', 
		'\x12D', '\x5', '\x38', '\x1D', '\xF', '\x12D', '\x13B', '\x3', '\x2', 
		'\x2', '\x2', '\x12E', '\x13B', '\x5', '.', '\x18', '\x2', '\x12F', '\x13B', 
		'\x5', '\x30', '\x19', '\x2', '\x130', '\x13B', '\x5', ',', '\x17', '\x2', 
		'\x131', '\x13B', '\x5', '\n', '\x6', '\x2', '\x132', '\x13B', '\x5', 
		'\x14', '\v', '\x2', '\x133', '\x13B', '\x5', '\x18', '\r', '\x2', '\x134', 
		'\x13B', '\x5', '\x16', '\f', '\x2', '\x135', '\x13B', '\x5', '\x1C', 
		'\xF', '\x2', '\x136', '\x13B', '\x5', ' ', '\x11', '\x2', '\x137', '\x13B', 
		'\x5', '&', '\x14', '\x2', '\x138', '\x13B', '\x5', '\b', '\x5', '\x2', 
		'\x139', '\x13B', '\x5', '*', '\x16', '\x2', '\x13A', '\x127', '\x3', 
		'\x2', '\x2', '\x2', '\x13A', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x13A', 
		'\x12E', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x12F', '\x3', '\x2', '\x2', 
		'\x2', '\x13A', '\x130', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x131', 
		'\x3', '\x2', '\x2', '\x2', '\x13A', '\x132', '\x3', '\x2', '\x2', '\x2', 
		'\x13A', '\x133', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x134', '\x3', 
		'\x2', '\x2', '\x2', '\x13A', '\x135', '\x3', '\x2', '\x2', '\x2', '\x13A', 
		'\x136', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x137', '\x3', '\x2', '\x2', 
		'\x2', '\x13A', '\x138', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x139', 
		'\x3', '\x2', '\x2', '\x2', '\x13B', '\x144', '\x3', '\x2', '\x2', '\x2', 
		'\x13C', '\x13D', '\f', '\x10', '\x2', '\x2', '\x13D', '\x13E', '\x5', 
		'\x32', '\x1A', '\x2', '\x13E', '\x13F', '\x5', '\x38', '\x1D', '\x11', 
		'\x13F', '\x143', '\x3', '\x2', '\x2', '\x2', '\x140', '\x141', '\f', 
		'\x11', '\x2', '\x2', '\x141', '\x143', '\x5', '\x4', '\x3', '\x2', '\x142', 
		'\x13C', '\x3', '\x2', '\x2', '\x2', '\x142', '\x140', '\x3', '\x2', '\x2', 
		'\x2', '\x143', '\x146', '\x3', '\x2', '\x2', '\x2', '\x144', '\x142', 
		'\x3', '\x2', '\x2', '\x2', '\x144', '\x145', '\x3', '\x2', '\x2', '\x2', 
		'\x145', '\x39', '\x3', '\x2', '\x2', '\x2', '\x146', '\x144', '\x3', 
		'\x2', '\x2', '\x2', '\x147', '\x14D', '\x5', '\x38', '\x1D', '\x2', '\x148', 
		'\x149', '\x5', '\x36', '\x1C', '\x2', '\x149', '\x14A', '\x5', '\x38', 
		'\x1D', '\x2', '\x14A', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x14B', 
		'\x148', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x14F', '\x3', '\x2', '\x2', 
		'\x2', '\x14D', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x14E', 
		'\x3', '\x2', '\x2', '\x2', '\x14E', '\x151', '\x3', '\x2', '\x2', '\x2', 
		'\x14F', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x150', '\x152', '\x5', 
		'\x36', '\x1C', '\x2', '\x151', '\x150', '\x3', '\x2', '\x2', '\x2', '\x151', 
		'\x152', '\x3', '\x2', '\x2', '\x2', '\x152', '\x153', '\x3', '\x2', '\x2', 
		'\x2', '\x153', '\x154', '\a', '\x2', '\x2', '\x3', '\x154', ';', '\x3', 
		'\x2', '\x2', '\x2', '\x31', '?', '\x44', 'I', '[', 'g', 'k', 'o', 't', 
		'w', 'z', '\x80', '\x84', '\x88', '\x8C', '\x90', '\x93', '\x96', '\xA0', 
		'\xA3', '\xA9', '\xAD', '\xB1', '\xB5', '\xB9', '\xBC', '\xBF', '\xC9', 
		'\xD0', '\xD4', '\xDA', '\xE1', '\xE5', '\xF0', '\xF3', '\xFF', '\x103', 
		'\x10A', '\x10F', '\x117', '\x11E', '\x122', '\x125', '\x13A', '\x142', 
		'\x144', '\x14D', '\x151',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace LentoCore.Parser
